Index: lab_1/benches/cipher_bench.rs
===================================================================
diff --git a/lab_1/benches/cipher_bench.rs b/lab_1/benches/cipher_bench.rs
--- a/lab_1/benches/cipher_bench.rs	(revision 883b523c0c0e563da140b8fac3634ac299963c1b)
+++ b/lab_1/benches/cipher_bench.rs	(revision c7baef58a7d7801dcdd69247d6aa3608e4a149f7)
@@ -1,6 +1,6 @@
 // benches/cipher_bench.rs
 
-use std::time::Duration;               // ← импорт для Duration
+use std::time::{Duration, Instant}; // ← добавили Instant
 use criterion::{criterion_group, criterion_main, BenchmarkId, Criterion};
 use tokio::runtime::Runtime;
 
@@ -32,16 +32,15 @@
     // 1. Создаём 1 ГБ входной файл один раз:
     let mut input_file = NamedTempFile::new().unwrap();
     let mut buffer = vec![0u8; 1024 * 1024];
-    let mut rng = rand::rng();
+    let mut rng = rand::thread_rng();
     for _ in 0..1024 {
         rng.fill_bytes(&mut buffer);
         input_file.write_all(&buffer).unwrap();
     }
     let input_path = input_file.path().to_string_lossy().into_owned();
 
-    // 2. Настраиваем группу бенчмарков и расширяем время измерения до 10 минут:
     let mut group = c.benchmark_group("File Encryption 1GB");
-    group.measurement_time(Duration::from_secs(600)); // ← здесь пункт 2
+    group.measurement_time(Duration::from_secs(600));
 
     let rt = Runtime::new().unwrap();
 
@@ -65,12 +64,14 @@
                         let output_file = NamedTempFile::new().unwrap();
                         let output_path = output_file.path().to_string_lossy().into_owned();
 
+                        let start = Instant::now(); // ← старт замера
                         ctx.encrypt(
                             CipherInput::File(input.clone()),
                             &mut CipherOutput::File(output_path),
                         )
                             .await
                             .unwrap();
+                        println!("One encrypt duration: {:?}", start.elapsed()); // ← лог
                     }
                 })
         },
Index: lab_1/flamegraph.svg
===================================================================
diff --git a/lab_1/flamegraph.svg b/lab_1/flamegraph.svg
new file mode 100644
--- /dev/null	(revision c7baef58a7d7801dcdd69247d6aa3608e4a149f7)
+++ b/lab_1/flamegraph.svg	(revision c7baef58a7d7801dcdd69247d6aa3608e4a149f7)
@@ -0,0 +1,491 @@
+<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
+text { font-family:monospace; font-size:12px }
+#title { text-anchor:middle; font-size:17px; }
+#matched { text-anchor:end; }
+#search { text-anchor:end; opacity:0.1; cursor:pointer; }
+#search:hover, #search.show { opacity:1; }
+#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
+#unzoom { cursor:pointer; }
+#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
+.hide { display:none; }
+.parent { opacity:0.5; }
+</style><script type="text/ecmascript"><![CDATA[
+        var nametype = 'Function:';
+        var fontsize = 12;
+        var fontwidth = 0.59;
+        var xpad = 10;
+        var inverted = false;
+        var searchcolor = 'rgb(230,0,230)';
+        var fluiddrawing = true;
+        var truncate_text_right = false;
+    ]]><![CDATA["use strict";
+var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
+function init(evt) {
+    details = document.getElementById("details").firstChild;
+    searchbtn = document.getElementById("search");
+    unzoombtn = document.getElementById("unzoom");
+    matchedtxt = document.getElementById("matched");
+    svg = document.getElementsByTagName("svg")[0];
+    frames = document.getElementById("frames");
+    known_font_width = get_monospace_width(frames);
+    total_samples = parseInt(frames.attributes.total_samples.value);
+    searching = 0;
+
+    // Use GET parameters to restore a flamegraph's state.
+    var restore_state = function() {
+        var params = get_params();
+        if (params.x && params.y)
+            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
+        if (params.s)
+            search(params.s);
+    };
+
+    if (fluiddrawing) {
+        // Make width dynamic so the SVG fits its parent's width.
+        svg.removeAttribute("width");
+        // Edge requires us to have a viewBox that gets updated with size changes.
+        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
+        if (!isEdge) {
+            svg.removeAttribute("viewBox");
+        }
+        var update_for_width_change = function() {
+            if (isEdge) {
+                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
+            }
+
+            // Keep consistent padding on left and right of frames container.
+            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;
+
+            // Text truncation needs to be adjusted for the current width.
+            update_text_for_elements(frames.children);
+
+            // Keep search elements at a fixed distance from right edge.
+            var svgWidth = svg.width.baseVal.value;
+            searchbtn.attributes.x.value = svgWidth - xpad;
+            matchedtxt.attributes.x.value = svgWidth - xpad;
+        };
+        window.addEventListener('resize', function() {
+            update_for_width_change();
+        });
+        // This needs to be done asynchronously for Safari to work.
+        setTimeout(function() {
+            unzoom();
+            update_for_width_change();
+            restore_state();
+        }, 0);
+    } else {
+        restore_state();
+    }
+}
+// event listeners
+window.addEventListener("click", function(e) {
+    var target = find_group(e.target);
+    if (target) {
+        if (target.nodeName == "a") {
+            if (e.ctrlKey === false) return;
+            e.preventDefault();
+        }
+        if (target.classList.contains("parent")) unzoom();
+        zoom(target);
+
+        // set parameters for zoom state
+        var el = target.querySelector("rect");
+        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
+            var params = get_params()
+            params.x = el.attributes["fg:x"].value;
+            params.y = el.attributes.y.value;
+            history.replaceState(null, null, parse_params(params));
+        }
+    }
+    else if (e.target.id == "unzoom") {
+        unzoom();
+
+        // remove zoom state
+        var params = get_params();
+        if (params.x) delete params.x;
+        if (params.y) delete params.y;
+        history.replaceState(null, null, parse_params(params));
+    }
+    else if (e.target.id == "search") search_prompt();
+}, false)
+// mouse-over for info
+// show
+window.addEventListener("mouseover", function(e) {
+    var target = find_group(e.target);
+    if (target) details.nodeValue = nametype + " " + g_to_text(target);
+}, false)
+// clear
+window.addEventListener("mouseout", function(e) {
+    var target = find_group(e.target);
+    if (target) details.nodeValue = ' ';
+}, false)
+// ctrl-F for search
+window.addEventListener("keydown",function (e) {
+    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
+        e.preventDefault();
+        search_prompt();
+    }
+}, false)
+// functions
+function get_params() {
+    var params = {};
+    var paramsarr = window.location.search.substr(1).split('&');
+    for (var i = 0; i < paramsarr.length; ++i) {
+        var tmp = paramsarr[i].split("=");
+        if (!tmp[0] || !tmp[1]) continue;
+        params[tmp[0]]  = decodeURIComponent(tmp[1]);
+    }
+    return params;
+}
+function parse_params(params) {
+    var uri = "?";
+    for (var key in params) {
+        uri += key + '=' + encodeURIComponent(params[key]) + '&';
+    }
+    if (uri.slice(-1) == "&")
+        uri = uri.substring(0, uri.length - 1);
+    if (uri == '?')
+        uri = window.location.href.split('?')[0];
+    return uri;
+}
+function find_child(node, selector) {
+    var children = node.querySelectorAll(selector);
+    if (children.length) return children[0];
+    return;
+}
+function find_group(node) {
+    var parent = node.parentElement;
+    if (!parent) return;
+    if (parent.id == "frames") return node;
+    return find_group(parent);
+}
+function orig_save(e, attr, val) {
+    if (e.attributes["fg:orig_" + attr] != undefined) return;
+    if (e.attributes[attr] == undefined) return;
+    if (val == undefined) val = e.attributes[attr].value;
+    e.setAttribute("fg:orig_" + attr, val);
+}
+function orig_load(e, attr) {
+    if (e.attributes["fg:orig_"+attr] == undefined) return;
+    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
+    e.removeAttribute("fg:orig_" + attr);
+}
+function g_to_text(e) {
+    var text = find_child(e, "title").firstChild.nodeValue;
+    return (text)
+}
+function g_to_func(e) {
+    var func = g_to_text(e);
+    // if there's any manipulation we want to do to the function
+    // name before it's searched, do it here before returning.
+    return (func);
+}
+function get_monospace_width(frames) {
+    // Given the id="frames" element, return the width of text characters if
+    // this is a monospace font, otherwise return 0.
+    text = find_child(frames.children[0], "text");
+    originalContent = text.textContent;
+    text.textContent = "!";
+    bangWidth = text.getComputedTextLength();
+    text.textContent = "W";
+    wWidth = text.getComputedTextLength();
+    text.textContent = originalContent;
+    if (bangWidth === wWidth) {
+        return bangWidth;
+    } else {
+        return 0;
+    }
+}
+function update_text_for_elements(elements) {
+    // In order to render quickly in the browser, you want to do one pass of
+    // reading attributes, and one pass of mutating attributes. See
+    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.
+
+    // Fall back to inefficient calculation, if we're variable-width font.
+    // TODO This should be optimized somehow too.
+    if (known_font_width === 0) {
+        for (var i = 0; i < elements.length; i++) {
+            update_text(elements[i]);
+        }
+        return;
+    }
+
+    var textElemNewAttributes = [];
+    for (var i = 0; i < elements.length; i++) {
+        var e = elements[i];
+        var r = find_child(e, "rect");
+        var t = find_child(e, "text");
+        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
+        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
+        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
+
+        // Smaller than this size won't fit anything
+        if (w < 2 * known_font_width) {
+            textElemNewAttributes.push([newX, ""]);
+            continue;
+        }
+
+        // Fit in full text width
+        if (txt.length * known_font_width < w) {
+            textElemNewAttributes.push([newX, txt]);
+            continue;
+        }
+
+        var substringLength = Math.floor(w / known_font_width) - 2;
+        if (truncate_text_right) {
+            // Truncate the right side of the text.
+            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
+            continue;
+        } else {
+            // Truncate the left side of the text.
+            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
+            continue;
+        }
+    }
+
+    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");
+
+    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
+    for (var i = 0; i < elements.length; i++) {
+        var e = elements[i];
+        var values = textElemNewAttributes[i];
+        var t = find_child(e, "text");
+        t.attributes.x.value = values[0];
+        t.textContent = values[1];
+    }
+}
+
+function update_text(e) {
+    var r = find_child(e, "rect");
+    var t = find_child(e, "text");
+    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
+    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
+    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
+
+    // Smaller than this size won't fit anything
+    if (w < 2 * fontsize * fontwidth) {
+        t.textContent = "";
+        return;
+    }
+    t.textContent = txt;
+    // Fit in full text width
+    if (t.getComputedTextLength() < w)
+        return;
+    if (truncate_text_right) {
+        // Truncate the right side of the text.
+        for (var x = txt.length - 2; x > 0; x--) {
+            if (t.getSubStringLength(0, x + 2) <= w) {
+                t.textContent = txt.substring(0, x) + "..";
+                return;
+            }
+        }
+    } else {
+        // Truncate the left side of the text.
+        for (var x = 2; x < txt.length; x++) {
+            if (t.getSubStringLength(x - 2, txt.length) <= w) {
+                t.textContent = ".." + txt.substring(x, txt.length);
+                return;
+            }
+        }
+    }
+    t.textContent = "";
+}
+// zoom
+function zoom_reset(e) {
+    if (e.tagName == "rect") {
+        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
+        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
+    }
+    if (e.childNodes == undefined) return;
+    for(var i = 0, c = e.childNodes; i < c.length; i++) {
+        zoom_reset(c[i]);
+    }
+}
+function zoom_child(e, x, zoomed_width_samples) {
+    if (e.tagName == "text") {
+        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
+        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
+    } else if (e.tagName == "rect") {
+        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
+        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
+    }
+    if (e.childNodes == undefined) return;
+    for(var i = 0, c = e.childNodes; i < c.length; i++) {
+        zoom_child(c[i], x, zoomed_width_samples);
+    }
+}
+function zoom_parent(e) {
+    if (e.attributes) {
+        if (e.attributes.x != undefined) {
+            e.attributes.x.value = "0.0%";
+        }
+        if (e.attributes.width != undefined) {
+            e.attributes.width.value = "100.0%";
+        }
+    }
+    if (e.childNodes == undefined) return;
+    for(var i = 0, c = e.childNodes; i < c.length; i++) {
+        zoom_parent(c[i]);
+    }
+}
+function zoom(node) {
+    var attr = find_child(node, "rect").attributes;
+    var width = parseInt(attr["fg:w"].value);
+    var xmin = parseInt(attr["fg:x"].value);
+    var xmax = xmin + width;
+    var ymin = parseFloat(attr.y.value);
+    unzoombtn.classList.remove("hide");
+    var el = frames.children;
+    var to_update_text = [];
+    for (var i = 0; i < el.length; i++) {
+        var e = el[i];
+        var a = find_child(e, "rect").attributes;
+        var ex = parseInt(a["fg:x"].value);
+        var ew = parseInt(a["fg:w"].value);
+        // Is it an ancestor
+        if (!inverted) {
+            var upstack = parseFloat(a.y.value) > ymin;
+        } else {
+            var upstack = parseFloat(a.y.value) < ymin;
+        }
+        if (upstack) {
+            // Direct ancestor
+            if (ex <= xmin && (ex+ew) >= xmax) {
+                e.classList.add("parent");
+                zoom_parent(e);
+                to_update_text.push(e);
+            }
+            // not in current path
+            else
+                e.classList.add("hide");
+        }
+        // Children maybe
+        else {
+            // no common path
+            if (ex < xmin || ex >= xmax) {
+                e.classList.add("hide");
+            }
+            else {
+                zoom_child(e, xmin, width);
+                to_update_text.push(e);
+            }
+        }
+    }
+    update_text_for_elements(to_update_text);
+}
+function unzoom() {
+    unzoombtn.classList.add("hide");
+    var el = frames.children;
+    for(var i = 0; i < el.length; i++) {
+        el[i].classList.remove("parent");
+        el[i].classList.remove("hide");
+        zoom_reset(el[i]);
+    }
+    update_text_for_elements(el);
+}
+// search
+function reset_search() {
+    var el = document.querySelectorAll("#frames rect");
+    for (var i = 0; i < el.length; i++) {
+        orig_load(el[i], "fill")
+    }
+    var params = get_params();
+    delete params.s;
+    history.replaceState(null, null, parse_params(params));
+}
+function search_prompt() {
+    if (!searching) {
+        var term = prompt("Enter a search term (regexp " +
+            "allowed, eg: ^ext4_)", "");
+        if (term != null) {
+            search(term)
+        }
+    } else {
+        reset_search();
+        searching = 0;
+        searchbtn.classList.remove("show");
+        searchbtn.firstChild.nodeValue = "Search"
+        matchedtxt.classList.add("hide");
+        matchedtxt.firstChild.nodeValue = ""
+    }
+}
+function search(term) {
+    var re = new RegExp(term);
+    var el = frames.children;
+    var matches = new Object();
+    var maxwidth = 0;
+    for (var i = 0; i < el.length; i++) {
+        var e = el[i];
+        // Skip over frames which are either not visible, or below the zoomed-to frame
+        if (e.classList.contains("hide") || e.classList.contains("parent")) {
+            continue;
+        }
+        var func = g_to_func(e);
+        var rect = find_child(e, "rect");
+        if (func == null || rect == null)
+            continue;
+        // Save max width. Only works as we have a root frame
+        var w = parseInt(rect.attributes["fg:w"].value);
+        if (w > maxwidth)
+            maxwidth = w;
+        if (func.match(re)) {
+            // highlight
+            var x = parseInt(rect.attributes["fg:x"].value);
+            orig_save(rect, "fill");
+            rect.attributes.fill.value = searchcolor;
+            // remember matches
+            if (matches[x] == undefined) {
+                matches[x] = w;
+            } else {
+                if (w > matches[x]) {
+                    // overwrite with parent
+                    matches[x] = w;
+                }
+            }
+            searching = 1;
+        }
+    }
+    if (!searching)
+        return;
+    var params = get_params();
+    params.s = term;
+    history.replaceState(null, null, parse_params(params));
+
+    searchbtn.classList.add("show");
+    searchbtn.firstChild.nodeValue = "Reset Search";
+    // calculate percent matched, excluding vertical overlap
+    var count = 0;
+    var lastx = -1;
+    var lastw = 0;
+    var keys = Array();
+    for (k in matches) {
+        if (matches.hasOwnProperty(k))
+            keys.push(k);
+    }
+    // sort the matched frames by their x location
+    // ascending, then width descending
+    keys.sort(function(a, b){
+        return a - b;
+    });
+    // Step through frames saving only the biggest bottom-up frames
+    // thanks to the sort order. This relies on the tree property
+    // where children are always smaller than their parents.
+    for (var k in keys) {
+        var x = parseInt(keys[k]);
+        var w = matches[keys[k]];
+        if (x >= lastx + lastw) {
+            count += w;
+            lastx = x;
+            lastw = w;
+        }
+    }
+    // display matched percent
+    matchedtxt.classList.remove("hide");
+    var pct = 100 * count / maxwidth;
+    if (pct != 100) pct = pct.toFixed(1);
+    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
+}
+function format_percent(n) {
+    return n.toFixed(4) + "%";
+}
+]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="17836966963"><g><title>&lt;&lt;cargo_util_schemas::manifest::TomlDetailedDependency&lt;_&gt; as serde::de::Deserialize&gt;::deserialize::__Visitor&lt;alloc::string::String&gt; as serde::de::Visitor&gt;::visit_map::&lt;serde_untagged::map::Map&gt; (2,753,830 samples, 0.02%)</title><rect x="0.0079%" y="517" width="0.0154%" height="15" fill="rgb(227,0,7)" fg:x="1410673" fg:w="2753830"/><text x="0.2579%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;_, _, _&gt; as core::clone::Clone&gt;::clone::clone_subtree::&lt;alloc::string::String, toml::value::Value, alloc::alloc::Global&gt; (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="517" width="0.0151%" height="15" fill="rgb(217,0,24)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="501" width="0.0151%" height="15" fill="rgb(221,193,54)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="485" width="0.0151%" height="15" fill="rgb(248,212,6)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="469" width="0.0151%" height="15" fill="rgb(208,68,35)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="453" width="0.0151%" height="15" fill="rgb(232,128,0)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="437" width="0.0151%" height="15" fill="rgb(207,160,47)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="421" width="0.0151%" height="15" fill="rgb(228,23,34)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="405" width="0.0151%" height="15" fill="rgb(218,30,26)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;_, _, _&gt; as core::clone::Clone&gt;::clone::clone_subtree::&lt;alloc::string::String, toml::value::Value, alloc::alloc::Global&gt; (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="389" width="0.0151%" height="15" fill="rgb(220,122,19)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="373" width="0.0151%" height="15" fill="rgb(250,228,42)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="357" width="0.0151%" height="15" fill="rgb(240,193,28)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="341" width="0.0151%" height="15" fill="rgb(216,20,37)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="325" width="0.0151%" height="15" fill="rgb(206,188,39)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="309" width="0.0151%" height="15" fill="rgb(217,207,13)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="293" width="0.0151%" height="15" fill="rgb(231,73,38)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="277" width="0.0151%" height="15" fill="rgb(225,20,46)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="287.50"></text></g><g><title>&lt;toml::value::Value as alloc::slice::hack::ConvertVec&gt;::to_vec::&lt;alloc::alloc::Global&gt; (2,697,322 samples, 0.02%)</title><rect x="0.0233%" y="261" width="0.0151%" height="15" fill="rgb(210,31,41)" fg:x="4164503" fg:w="2697322"/><text x="0.2733%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;_, _, _&gt; as core::clone::Clone&gt;::clone::clone_subtree::&lt;cargo_util_schemas::manifest::FeatureName, alloc::vec::Vec&lt;alloc::string::String&gt;, alloc::alloc::Global&gt; (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="517" width="0.0149%" height="15" fill="rgb(221,200,47)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="501" width="0.0149%" height="15" fill="rgb(226,26,5)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="485" width="0.0149%" height="15" fill="rgb(249,33,26)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="469" width="0.0149%" height="15" fill="rgb(235,183,28)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="453" width="0.0149%" height="15" fill="rgb(221,5,38)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="437" width="0.0149%" height="15" fill="rgb(247,18,42)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="421" width="0.0149%" height="15" fill="rgb(241,131,45)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="405" width="0.0149%" height="15" fill="rgb(249,31,29)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="389" width="0.0149%" height="15" fill="rgb(225,111,53)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="373" width="0.0149%" height="15" fill="rgb(238,160,17)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="357" width="0.0149%" height="15" fill="rgb(214,148,48)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="341" width="0.0149%" height="15" fill="rgb(232,36,49)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="325" width="0.0149%" height="15" fill="rgb(209,103,24)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="335.50"></text></g><g><title>malloc (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="309" width="0.0149%" height="15" fill="rgb(229,88,8)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="319.50"></text></g><g><title>[libc.so.6] (2,659,106 samples, 0.01%)</title><rect x="0.0385%" y="293" width="0.0149%" height="15" fill="rgb(213,181,19)" fg:x="6861825" fg:w="2659106"/><text x="0.2885%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::util::interning::InternedString&gt;&gt; as serde::de::Deserialize&gt;::deserialize::&lt;&amp;mut serde_json::de::Deserializer&lt;serde_json::read::SliceRead&gt;&gt; (4,155,267 samples, 0.02%)</title><rect x="0.0534%" y="517" width="0.0233%" height="15" fill="rgb(254,191,54)" fg:x="9520931" fg:w="4155267"/><text x="0.3034%" y="527.50"></text></g><g><title>[libc.so.6] (4,155,267 samples, 0.02%)</title><rect x="0.0534%" y="501" width="0.0233%" height="15" fill="rgb(241,83,37)" fg:x="9520931" fg:w="4155267"/><text x="0.3034%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;alloc::borrow::Cow&lt;str&gt;, serde_json::value::Value&gt;&gt;::dying_next (6,288,753 samples, 0.04%)</title><rect x="0.0767%" y="517" width="0.0353%" height="15" fill="rgb(233,36,39)" fg:x="13676198" fg:w="6288753"/><text x="0.3267%" y="527.50"></text></g><g><title>cfree (6,288,753 samples, 0.04%)</title><rect x="0.0767%" y="501" width="0.0353%" height="15" fill="rgb(226,3,54)" fg:x="13676198" fg:w="6288753"/><text x="0.3267%" y="511.50"></text></g><g><title>[libc.so.6] (6,288,753 samples, 0.04%)</title><rect x="0.0767%" y="485" width="0.0353%" height="15" fill="rgb(245,192,40)" fg:x="13676198" fg:w="6288753"/><text x="0.3267%" y="495.50"></text></g><g><title>[libc.so.6] (6,288,753 samples, 0.04%)</title><rect x="0.0767%" y="469" width="0.0353%" height="15" fill="rgb(238,167,29)" fg:x="13676198" fg:w="6288753"/><text x="0.3267%" y="479.50"></text></g><g><title>[libc.so.6] (3,200,706 samples, 0.02%)</title><rect x="0.0940%" y="453" width="0.0179%" height="15" fill="rgb(232,182,51)" fg:x="16764245" fg:w="3200706"/><text x="0.3440%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;alloc::string::String, cargo_util_schemas::manifest::TomlDependency&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,569,441 samples, 0.01%)</title><rect x="0.1119%" y="517" width="0.0144%" height="15" fill="rgb(231,60,39)" fg:x="19964951" fg:w="2569441"/><text x="0.3619%" y="527.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry&gt;::ensure_loaded (3,005,326 samples, 0.02%)</title><rect x="0.1396%" y="517" width="0.0168%" height="15" fill="rgb(208,69,12)" fg:x="24899154" fg:w="3005326"/><text x="0.3896%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;itertools::flatten_ok::FlattenOk&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;&amp;cargo::core::dependency::Dependency&gt;, &lt;cargo::core::resolver::features::FeatureResolver&gt;::deps::{closure#0}::{closure#1}&gt;, core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;cargo::core::resolver::features::FeaturesFor&gt;, &lt;cargo::core::resolver::features::FeatureResolver&gt;::deps::{closure#0}::{closure#1}::{closure#2}&gt;, anyhow::Error&gt;, core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,508,452 samples, 0.01%)</title><rect x="0.1641%" y="517" width="0.0141%" height="15" fill="rgb(235,93,37)" fg:x="29273702" fg:w="2508452"/><text x="0.4141%" y="527.50"></text></g><g><title>&lt;erased_serde::de::erase::Deserializer&lt;serde_value::de::ValueDeserializer&lt;toml_edit::de::Error&gt;&gt; as erased_serde::de::Deserializer&gt;::erased_deserialize_i8 (3,028,903 samples, 0.02%)</title><rect x="0.1782%" y="517" width="0.0170%" height="15" fill="rgb(213,116,39)" fg:x="31782154" fg:w="3028903"/><text x="0.4282%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;(semver::Version, cargo::sources::registry::index::MaybeIndexSummary)&gt;&gt;::reserve_rehash::&lt;hashbrown::map::make_hasher&lt;semver::Version, cargo::sources::registry::index::MaybeIndexSummary, std::hash::random::RandomState&gt;::{closure#0}&gt; (2,558,480 samples, 0.01%)</title><rect x="0.1952%" y="517" width="0.0143%" height="15" fill="rgb(222,207,29)" fg:x="34811057" fg:w="2558480"/><text x="0.4452%" y="527.50"></text></g><g><title>&lt;im_rc::nodes::btree::Node&lt;(cargo::core::package_id::PackageId, im_rc::ord::map::OrdMap&lt;cargo::core::package_id::PackageId, std::collections::hash::set::HashSet&lt;cargo::core::dependency::Dependency&gt;&gt;)&gt;&gt;::split (3,082,286 samples, 0.02%)</title><rect x="0.2095%" y="517" width="0.0173%" height="15" fill="rgb(206,96,30)" fg:x="37369537" fg:w="3082286"/><text x="0.4595%" y="527.50"></text></g><g><title>[libc.so.6] (3,082,286 samples, 0.02%)</title><rect x="0.2095%" y="501" width="0.0173%" height="15" fill="rgb(218,138,4)" fg:x="37369537" fg:w="3082286"/><text x="0.4595%" y="511.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;&amp;str, ()&gt;&gt;::hash::&lt;str&gt; (3,116,071 samples, 0.02%)</title><rect x="0.2268%" y="517" width="0.0175%" height="15" fill="rgb(250,191,14)" fg:x="40451823" fg:w="3116071"/><text x="0.4768%" y="527.50"></text></g><g><title>&lt;memchr::arch::x86_64::avx2::memchr::One&gt;::find_raw_avx2 (2,164,462 samples, 0.01%)</title><rect x="0.2443%" y="517" width="0.0121%" height="15" fill="rgb(239,60,40)" fg:x="43567894" fg:w="2164462"/><text x="0.4943%" y="527.50"></text></g><g><title>&lt;serde_untagged::UntaggedEnumVisitor&lt;cargo::util::interning::InternedString&gt; as serde::de::Visitor&gt;::visit_borrowed_str::&lt;serde_json::error::Error&gt; (2,781,985 samples, 0.02%)</title><rect x="0.2564%" y="517" width="0.0156%" height="15" fill="rgb(206,27,48)" fg:x="45732356" fg:w="2781985"/><text x="0.5064%" y="527.50"></text></g><g><title>&lt;serde_untagged::UntaggedEnumVisitor&lt;cargo::util::interning::InternedString&gt; as serde::de::Visitor&gt;::visit_str::&lt;serde_json::error::Error&gt; (2,781,985 samples, 0.02%)</title><rect x="0.2564%" y="501" width="0.0156%" height="15" fill="rgb(225,35,8)" fg:x="45732356" fg:w="2781985"/><text x="0.5064%" y="511.50"></text></g><g><title>&lt;str&gt;::trim_matches::&lt;&lt;str&gt;::trim::{closure#0}&gt; (2,544,673 samples, 0.01%)</title><rect x="0.2720%" y="517" width="0.0143%" height="15" fill="rgb(250,213,24)" fg:x="48514341" fg:w="2544673"/><text x="0.5220%" y="527.50"></text></g><g><title>&lt;toml_edit::de::table::TableDeserializer as serde::de::Deserializer&gt;::deserialize_any::&lt;serde_ignored::Wrap&lt;&lt;alloc::collections::btree::map::BTreeMap&lt;_, _&gt; as serde::de::Deserialize&gt;::deserialize::MapVisitor&lt;cargo_util_schemas::manifest::PackageName, cargo_util_schemas::manifest::InheritableDependency&gt;, cargo::util::toml::deserialize_toml::{closure#0}&gt;&gt; (2,096,083 samples, 0.01%)</title><rect x="0.2863%" y="517" width="0.0118%" height="15" fill="rgb(247,123,22)" fg:x="51059014" fg:w="2096083"/><text x="0.5363%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;cargo_util_schemas::manifest::PackageName, cargo_util_schemas::manifest::InheritableDependency&gt;&gt;::insert (2,096,083 samples, 0.01%)</title><rect x="0.2863%" y="501" width="0.0118%" height="15" fill="rgb(231,138,38)" fg:x="51059014" fg:w="2096083"/><text x="0.5363%" y="511.50"></text></g><g><title>malloc (2,096,083 samples, 0.01%)</title><rect x="0.2863%" y="485" width="0.0118%" height="15" fill="rgb(231,145,46)" fg:x="51059014" fg:w="2096083"/><text x="0.5363%" y="495.50"></text></g><g><title>[libc.so.6] (2,096,083 samples, 0.01%)</title><rect x="0.2863%" y="469" width="0.0118%" height="15" fill="rgb(251,118,11)" fg:x="51059014" fg:w="2096083"/><text x="0.5363%" y="479.50"></text></g><g><title>[libc.so.6] (2,096,083 samples, 0.01%)</title><rect x="0.2863%" y="453" width="0.0118%" height="15" fill="rgb(217,147,25)" fg:x="51059014" fg:w="2096083"/><text x="0.5363%" y="463.50"></text></g><g><title>[libc.so.6] (2,096,083 samples, 0.01%)</title><rect x="0.2863%" y="437" width="0.0118%" height="15" fill="rgb(247,81,37)" fg:x="51059014" fg:w="2096083"/><text x="0.5363%" y="447.50"></text></g><g><title>&lt;toml_edit::value::Value as core::clone::Clone&gt;::clone (2,739,088 samples, 0.02%)</title><rect x="0.2980%" y="517" width="0.0154%" height="15" fill="rgb(209,12,38)" fg:x="53155097" fg:w="2739088"/><text x="0.5480%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,739,088 samples, 0.02%)</title><rect x="0.2980%" y="501" width="0.0154%" height="15" fill="rgb(227,1,9)" fg:x="53155097" fg:w="2739088"/><text x="0.5480%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,739,088 samples, 0.02%)</title><rect x="0.2980%" y="485" width="0.0154%" height="15" fill="rgb(248,47,43)" fg:x="53155097" fg:w="2739088"/><text x="0.5480%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,739,088 samples, 0.02%)</title><rect x="0.2980%" y="469" width="0.0154%" height="15" fill="rgb(221,10,30)" fg:x="53155097" fg:w="2739088"/><text x="0.5480%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2,739,088 samples, 0.02%)</title><rect x="0.2980%" y="453" width="0.0154%" height="15" fill="rgb(210,229,1)" fg:x="53155097" fg:w="2739088"/><text x="0.5480%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,739,088 samples, 0.02%)</title><rect x="0.2980%" y="437" width="0.0154%" height="15" fill="rgb(222,148,37)" fg:x="53155097" fg:w="2739088"/><text x="0.5480%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,739,088 samples, 0.02%)</title><rect x="0.2980%" y="421" width="0.0154%" height="15" fill="rgb(234,67,33)" fg:x="53155097" fg:w="2739088"/><text x="0.5480%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,739,088 samples, 0.02%)</title><rect x="0.2980%" y="405" width="0.0154%" height="15" fill="rgb(247,98,35)" fg:x="53155097" fg:w="2739088"/><text x="0.5480%" y="415.50"></text></g><g><title>[libc.so.6] (2,739,088 samples, 0.02%)</title><rect x="0.2980%" y="389" width="0.0154%" height="15" fill="rgb(247,138,52)" fg:x="53155097" fg:w="2739088"/><text x="0.5480%" y="399.50"></text></g><g><title>BN_set_bit (2,134,827 samples, 0.01%)</title><rect x="0.3134%" y="517" width="0.0120%" height="15" fill="rgb(213,79,30)" fg:x="55894185" fg:w="2134827"/><text x="0.5634%" y="527.50"></text></g><g><title>[libc.so.6] (2,134,827 samples, 0.01%)</title><rect x="0.3134%" y="501" width="0.0120%" height="15" fill="rgb(246,177,23)" fg:x="55894185" fg:w="2134827"/><text x="0.5634%" y="511.50"></text></g><g><title>EVP_DecodeUpdate (1,911,969 samples, 0.01%)</title><rect x="0.3253%" y="517" width="0.0107%" height="15" fill="rgb(230,62,27)" fg:x="58029012" fg:w="1911969"/><text x="0.5753%" y="527.50"></text></g><g><title>OPENSSL_LH_doall (1,841,411 samples, 0.01%)</title><rect x="0.3360%" y="517" width="0.0103%" height="15" fill="rgb(216,154,8)" fg:x="59940981" fg:w="1841411"/><text x="0.5860%" y="527.50"></text></g><g><title>PEM_read_bio_ex (2,387,987 samples, 0.01%)</title><rect x="0.3561%" y="517" width="0.0134%" height="15" fill="rgb(244,35,45)" fg:x="63513582" fg:w="2387987"/><text x="0.6061%" y="527.50"></text></g><g><title>malloc (2,387,987 samples, 0.01%)</title><rect x="0.3561%" y="501" width="0.0134%" height="15" fill="rgb(251,115,12)" fg:x="63513582" fg:w="2387987"/><text x="0.6061%" y="511.50"></text></g><g><title>[libc.so.6] (2,387,987 samples, 0.01%)</title><rect x="0.3561%" y="485" width="0.0134%" height="15" fill="rgb(240,54,50)" fg:x="63513582" fg:w="2387987"/><text x="0.6061%" y="495.50"></text></g><g><title>[unknown] (1,903,976 samples, 0.01%)</title><rect x="0.3695%" y="501" width="0.0107%" height="15" fill="rgb(233,84,52)" fg:x="65901569" fg:w="1903976"/><text x="0.6195%" y="511.50"></text></g><g><title>&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::deserialize_toml::{closure#0}&gt; as serde_untagged::map::ErasedMapAccess&gt;::erased_next_key_seed (1,903,976 samples, 0.01%)</title><rect x="0.3695%" y="485" width="0.0107%" height="15" fill="rgb(207,117,47)" fg:x="65901569" fg:w="1903976"/><text x="0.6195%" y="495.50"></text></g><g><title>[cargo] (5,197,493 samples, 0.03%)</title><rect x="0.3695%" y="517" width="0.0291%" height="15" fill="rgb(249,43,39)" fg:x="65901569" fg:w="5197493"/><text x="0.6195%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents::&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;, serde_json::ser::CompactFormatter&gt; (3,293,517 samples, 0.02%)</title><rect x="0.3801%" y="501" width="0.0185%" height="15" fill="rgb(209,38,44)" fg:x="67805545" fg:w="3293517"/><text x="0.6301%" y="511.50"></text></g><g><title>[libc.so.6] (2,668,563 samples, 0.01%)</title><rect x="0.4065%" y="517" width="0.0150%" height="15" fill="rgb(236,212,23)" fg:x="72504512" fg:w="2668563"/><text x="0.6565%" y="527.50"></text></g><g><title>&lt;toml::value::Value as core::fmt::Display&gt;::fmt (2,668,563 samples, 0.01%)</title><rect x="0.4065%" y="501" width="0.0150%" height="15" fill="rgb(242,79,21)" fg:x="72504512" fg:w="2668563"/><text x="0.6565%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,668,563 samples, 0.01%)</title><rect x="0.4065%" y="485" width="0.0150%" height="15" fill="rgb(211,96,35)" fg:x="72504512" fg:w="2668563"/><text x="0.6565%" y="495.50"></text></g><g><title>alloc::string::String::push_str (2,668,563 samples, 0.01%)</title><rect x="0.4065%" y="469" width="0.0150%" height="15" fill="rgb(253,215,40)" fg:x="72504512" fg:w="2668563"/><text x="0.6565%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2,668,563 samples, 0.01%)</title><rect x="0.4065%" y="453" width="0.0150%" height="15" fill="rgb(211,81,21)" fg:x="72504512" fg:w="2668563"/><text x="0.6565%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,668,563 samples, 0.01%)</title><rect x="0.4065%" y="437" width="0.0150%" height="15" fill="rgb(208,190,38)" fg:x="72504512" fg:w="2668563"/><text x="0.6565%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,668,563 samples, 0.01%)</title><rect x="0.4065%" y="421" width="0.0150%" height="15" fill="rgb(235,213,38)" fg:x="72504512" fg:w="2668563"/><text x="0.6565%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2,668,563 samples, 0.01%)</title><rect x="0.4065%" y="405" width="0.0150%" height="15" fill="rgb(237,122,38)" fg:x="72504512" fg:w="2668563"/><text x="0.6565%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;cargo_util_schemas::manifest::FeatureName, alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::insert (2,398,021 samples, 0.01%)</title><rect x="0.4298%" y="501" width="0.0134%" height="15" fill="rgb(244,218,35)" fg:x="76667245" fg:w="2398021"/><text x="0.6798%" y="511.50"></text></g><g><title>[libc.so.6] (2,398,021 samples, 0.01%)</title><rect x="0.4298%" y="485" width="0.0134%" height="15" fill="rgb(240,68,47)" fg:x="76667245" fg:w="2398021"/><text x="0.6798%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::util::interning::InternedString&gt;&gt;&gt;::dying_next (3,444,642 samples, 0.02%)</title><rect x="0.4433%" y="501" width="0.0193%" height="15" fill="rgb(210,16,53)" fg:x="79065266" fg:w="3444642"/><text x="0.6933%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;cargo::core::summary::Inner&gt;&gt;::make_mut (2,796,047 samples, 0.02%)</title><rect x="0.4626%" y="501" width="0.0157%" height="15" fill="rgb(235,124,12)" fg:x="82509908" fg:w="2796047"/><text x="0.7126%" y="511.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::sources::source::Source&gt;::query::{closure#4} (2,643,491 samples, 0.01%)</title><rect x="0.4783%" y="501" width="0.0148%" height="15" fill="rgb(224,169,11)" fg:x="85305955" fg:w="2643491"/><text x="0.7283%" y="511.50"></text></g><g><title>&lt;cargo_platform::cfg::CfgExpr as core::clone::Clone&gt;::clone (2,802,230 samples, 0.02%)</title><rect x="0.4932%" y="501" width="0.0157%" height="15" fill="rgb(250,166,2)" fg:x="87978759" fg:w="2802230"/><text x="0.7432%" y="511.50"></text></g><g><title>malloc (2,802,230 samples, 0.02%)</title><rect x="0.4932%" y="485" width="0.0157%" height="15" fill="rgb(242,216,29)" fg:x="87978759" fg:w="2802230"/><text x="0.7432%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt; as core::hash::Hasher&gt;::write (2,384,621 samples, 0.01%)</title><rect x="0.5089%" y="501" width="0.0134%" height="15" fill="rgb(230,116,27)" fg:x="90780989" fg:w="2384621"/><text x="0.7589%" y="511.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;&amp;str, (), std::hash::random::RandomState&gt;&gt;::insert (3,015,126 samples, 0.02%)</title><rect x="0.5223%" y="501" width="0.0169%" height="15" fill="rgb(228,99,48)" fg:x="93165610" fg:w="3015126"/><text x="0.7723%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;(&amp;str, ())&gt;&gt;::reserve_rehash::&lt;hashbrown::map::make_hasher&lt;&amp;str, (), std::hash::random::RandomState&gt;::{closure#0}&gt; (3,015,126 samples, 0.02%)</title><rect x="0.5223%" y="485" width="0.0169%" height="15" fill="rgb(253,11,6)" fg:x="93165610" fg:w="3015126"/><text x="0.7723%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;semver::Version, cargo::sources::registry::index::MaybeIndexSummary, std::hash::random::RandomState&gt;&gt;::insert (2,402,701 samples, 0.01%)</title><rect x="0.5392%" y="501" width="0.0135%" height="15" fill="rgb(247,143,39)" fg:x="96180736" fg:w="2402701"/><text x="0.7892%" y="511.50"></text></g><g><title>&lt;im_rc::nodes::btree::Node&lt;(cargo::core::package_id::PackageId, im_rc::ord::map::OrdMap&lt;cargo::core::package_id::PackageId, im_rc::hash::set::HashSet&lt;cargo::core::dependency::Dependency, rustc_hash::FxBuildHasher&gt;&gt;)&gt;&gt;::split (2,563,336 samples, 0.01%)</title><rect x="0.5527%" y="501" width="0.0144%" height="15" fill="rgb(236,97,10)" fg:x="98583437" fg:w="2563336"/><text x="0.8027%" y="511.50"></text></g><g><title>[libc.so.6] (2,563,336 samples, 0.01%)</title><rect x="0.5527%" y="485" width="0.0144%" height="15" fill="rgb(233,208,19)" fg:x="98583437" fg:w="2563336"/><text x="0.8027%" y="495.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;toml_edit::internal_string::InternalString, toml_edit::table::TableKeyValue&gt; as core::clone::Clone&gt;::clone_from (7,557,397 samples, 0.04%)</title><rect x="0.5671%" y="501" width="0.0424%" height="15" fill="rgb(216,164,2)" fg:x="101146773" fg:w="7557397"/><text x="0.8171%" y="511.50"></text></g><g><title>[libc.so.6] (4,908,167 samples, 0.03%)</title><rect x="0.5819%" y="485" width="0.0275%" height="15" fill="rgb(220,129,5)" fg:x="103796003" fg:w="4908167"/><text x="0.8319%" y="495.50"></text></g><g><title>[unknown] (2,356,210 samples, 0.01%)</title><rect x="0.5962%" y="469" width="0.0132%" height="15" fill="rgb(242,17,10)" fg:x="106347960" fg:w="2356210"/><text x="0.8462%" y="479.50"></text></g><g><title>&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::deserialize_toml::{closure#0}&gt; as serde::de::MapAccess&gt;::next_key_seed::&lt;core::marker::PhantomData&lt;alloc::string::String&gt;&gt; (2,902,739 samples, 0.02%)</title><rect x="0.6180%" y="501" width="0.0163%" height="15" fill="rgb(242,107,0)" fg:x="110230661" fg:w="2902739"/><text x="0.8680%" y="511.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (2,346,647 samples, 0.01%)</title><rect x="0.6352%" y="501" width="0.0132%" height="15" fill="rgb(251,28,31)" fg:x="113296246" fg:w="2346647"/><text x="0.8852%" y="511.50"></text></g><g><title>&lt;serde_value::de::ValueDeserializer&lt;toml_edit::de::Error&gt; as serde::de::Deserializer&gt;::__deserialize_content::&lt;serde::__private::de::content::ContentVisitor&gt; (1,812,644 samples, 0.01%)</title><rect x="0.6483%" y="501" width="0.0102%" height="15" fill="rgb(233,223,10)" fg:x="115642893" fg:w="1812644"/><text x="0.8983%" y="511.50"></text></g><g><title>&lt;toml_edit::de::table::TableDeserializer as serde::de::Deserializer&gt;::deserialize_any::&lt;serde_ignored::Wrap&lt;&lt;cargo_util_schemas::manifest::TomlTarget as serde::de::Deserialize&gt;::deserialize::__Visitor, cargo::util::toml::deserialize_toml::{closure#0}&gt;&gt; (2,324,286 samples, 0.01%)</title><rect x="0.6585%" y="501" width="0.0130%" height="15" fill="rgb(215,21,27)" fg:x="117455537" fg:w="2324286"/><text x="0.9085%" y="511.50"></text></g><g><title>[libc.so.6] (2,324,286 samples, 0.01%)</title><rect x="0.6585%" y="485" width="0.0130%" height="15" fill="rgb(232,23,21)" fg:x="117455537" fg:w="2324286"/><text x="0.9085%" y="495.50"></text></g><g><title>[libc.so.6] (1,941,940 samples, 0.01%)</title><rect x="0.6994%" y="501" width="0.0109%" height="15" fill="rgb(244,5,23)" fg:x="124743251" fg:w="1941940"/><text x="0.9494%" y="511.50"></text></g><g><title>[unknown] (1,941,940 samples, 0.01%)</title><rect x="0.6994%" y="485" width="0.0109%" height="15" fill="rgb(226,81,46)" fg:x="124743251" fg:w="1941940"/><text x="0.9494%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt; as core::hash::Hasher&gt;::write (3,012,605 samples, 0.02%)</title><rect x="0.7102%" y="485" width="0.0169%" height="15" fill="rgb(247,70,30)" fg:x="126685191" fg:w="3012605"/><text x="0.9602%" y="495.50"></text></g><g><title>[unknown] (5,533,965 samples, 0.03%)</title><rect x="0.7102%" y="501" width="0.0310%" height="15" fill="rgb(212,68,19)" fg:x="126685191" fg:w="5533965"/><text x="0.9602%" y="511.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (2,521,360 samples, 0.01%)</title><rect x="0.7271%" y="485" width="0.0141%" height="15" fill="rgb(240,187,13)" fg:x="129697796" fg:w="2521360"/><text x="0.9771%" y="495.50"></text></g><g><title>cargo::core::resolver::resolve (2,521,360 samples, 0.01%)</title><rect x="0.7271%" y="469" width="0.0141%" height="15" fill="rgb(223,113,26)" fg:x="129697796" fg:w="2521360"/><text x="0.9771%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt; (4,698,393 samples, 0.03%)</title><rect x="0.7413%" y="501" width="0.0263%" height="15" fill="rgb(206,192,2)" fg:x="132219156" fg:w="4698393"/><text x="0.9913%" y="511.50"></text></g><g><title>realloc (3,144,694 samples, 0.02%)</title><rect x="0.7500%" y="485" width="0.0176%" height="15" fill="rgb(241,108,4)" fg:x="133772855" fg:w="3144694"/><text x="1.0000%" y="495.50"></text></g><g><title>[libc.so.6] (3,144,694 samples, 0.02%)</title><rect x="0.7500%" y="469" width="0.0176%" height="15" fill="rgb(247,173,49)" fg:x="133772855" fg:w="3144694"/><text x="1.0000%" y="479.50"></text></g><g><title>[unknown] (3,144,694 samples, 0.02%)</title><rect x="0.7500%" y="453" width="0.0176%" height="15" fill="rgb(224,114,35)" fg:x="133772855" fg:w="3144694"/><text x="1.0000%" y="463.50"></text></g><g><title>[unknown] (3,144,694 samples, 0.02%)</title><rect x="0.7500%" y="437" width="0.0176%" height="15" fill="rgb(245,159,27)" fg:x="133772855" fg:w="3144694"/><text x="1.0000%" y="447.50"></text></g><g><title>[unknown] (3,144,694 samples, 0.02%)</title><rect x="0.7500%" y="421" width="0.0176%" height="15" fill="rgb(245,172,44)" fg:x="133772855" fg:w="3144694"/><text x="1.0000%" y="431.50"></text></g><g><title>[unknown] (3,144,694 samples, 0.02%)</title><rect x="0.7500%" y="405" width="0.0176%" height="15" fill="rgb(236,23,11)" fg:x="133772855" fg:w="3144694"/><text x="1.0000%" y="415.50"></text></g><g><title>cargo::core::resolver::resolve (2,902,080 samples, 0.02%)</title><rect x="0.7676%" y="501" width="0.0163%" height="15" fill="rgb(205,117,38)" fg:x="136917549" fg:w="2902080"/><text x="1.0176%" y="511.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (2,902,080 samples, 0.02%)</title><rect x="0.7676%" y="485" width="0.0163%" height="15" fill="rgb(237,72,25)" fg:x="136917549" fg:w="2902080"/><text x="1.0176%" y="495.50"></text></g><g><title>cargo::core::resolver::activate (2,902,080 samples, 0.02%)</title><rect x="0.7676%" y="469" width="0.0163%" height="15" fill="rgb(244,70,9)" fg:x="136917549" fg:w="2902080"/><text x="1.0176%" y="479.50"></text></g><g><title>cargo::ops::cargo_read_manifest::read_package (3,027,366 samples, 0.02%)</title><rect x="0.7839%" y="501" width="0.0170%" height="15" fill="rgb(217,125,39)" fg:x="139819629" fg:w="3027366"/><text x="1.0339%" y="511.50"></text></g><g><title>cargo::util::toml::read_manifest (3,027,366 samples, 0.02%)</title><rect x="0.7839%" y="485" width="0.0170%" height="15" fill="rgb(235,36,10)" fg:x="139819629" fg:w="3027366"/><text x="1.0339%" y="495.50"></text></g><g><title>cargo::util::toml::to_real_manifest (3,027,366 samples, 0.02%)</title><rect x="0.7839%" y="469" width="0.0170%" height="15" fill="rgb(251,123,47)" fg:x="139819629" fg:w="3027366"/><text x="1.0339%" y="479.50"></text></g><g><title>[libc.so.6] (2,700,774 samples, 0.02%)</title><rect x="0.7857%" y="453" width="0.0151%" height="15" fill="rgb(221,13,13)" fg:x="140146221" fg:w="2700774"/><text x="1.0357%" y="463.50"></text></g><g><title>cargo::util::toml::verify_lints (2,561,373 samples, 0.01%)</title><rect x="0.8008%" y="501" width="0.0144%" height="15" fill="rgb(238,131,9)" fg:x="142846995" fg:w="2561373"/><text x="1.0508%" y="511.50"></text></g><g><title>core::ptr::drop_in_place::&lt;alloc::vec::Vec&lt;cargo::core::manifest::Target&gt;&gt; (3,190,186 samples, 0.02%)</title><rect x="0.8152%" y="501" width="0.0179%" height="15" fill="rgb(211,50,8)" fg:x="145408368" fg:w="3190186"/><text x="1.0652%" y="511.50"></text></g><g><title>cfree (3,190,186 samples, 0.02%)</title><rect x="0.8152%" y="485" width="0.0179%" height="15" fill="rgb(245,182,24)" fg:x="145408368" fg:w="3190186"/><text x="1.0652%" y="495.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo_util_schemas::manifest::TomlPackage&gt; (2,916,142 samples, 0.02%)</title><rect x="0.8331%" y="501" width="0.0163%" height="15" fill="rgb(242,14,37)" fg:x="148598554" fg:w="2916142"/><text x="1.0831%" y="511.50"></text></g><g><title>cfree (2,916,142 samples, 0.02%)</title><rect x="0.8331%" y="485" width="0.0163%" height="15" fill="rgb(246,228,12)" fg:x="148598554" fg:w="2916142"/><text x="1.0831%" y="495.50"></text></g><g><title>[libc.so.6] (2,916,142 samples, 0.02%)</title><rect x="0.8331%" y="469" width="0.0163%" height="15" fill="rgb(213,55,15)" fg:x="148598554" fg:w="2916142"/><text x="1.0831%" y="479.50"></text></g><g><title>semver::parse::version_req (2,446,825 samples, 0.01%)</title><rect x="0.8581%" y="501" width="0.0137%" height="15" fill="rgb(209,9,3)" fg:x="153061601" fg:w="2446825"/><text x="1.1081%" y="511.50"></text></g><g><title>toml_edit::parser::document::document::{closure#0}::{closure#1} (2,735,292 samples, 0.02%)</title><rect x="0.8718%" y="501" width="0.0153%" height="15" fill="rgb(230,59,30)" fg:x="155508426" fg:w="2735292"/><text x="1.1218%" y="511.50"></text></g><g><title>[libc.so.6] (2,735,292 samples, 0.02%)</title><rect x="0.8718%" y="485" width="0.0153%" height="15" fill="rgb(209,121,21)" fg:x="155508426" fg:w="2735292"/><text x="1.1218%" y="495.50"></text></g><g><title>[unknown] (86,095,165 samples, 0.48%)</title><rect x="0.4214%" y="517" width="0.4827%" height="15" fill="rgb(220,109,13)" fg:x="75173075" fg:w="86095165"/><text x="0.6714%" y="527.50"></text></g><g><title>toml_edit::parser::document::parse_keyval (3,024,522 samples, 0.02%)</title><rect x="0.8872%" y="501" width="0.0170%" height="15" fill="rgb(232,18,1)" fg:x="158243718" fg:w="3024522"/><text x="1.1372%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt; (3,273,779 samples, 0.02%)</title><rect x="0.9041%" y="517" width="0.0184%" height="15" fill="rgb(215,41,42)" fg:x="161268240" fg:w="3273779"/><text x="1.1541%" y="527.50"></text></g><g><title>realloc (3,273,779 samples, 0.02%)</title><rect x="0.9041%" y="501" width="0.0184%" height="15" fill="rgb(224,123,36)" fg:x="161268240" fg:w="3273779"/><text x="1.1541%" y="511.50"></text></g><g><title>[libc.so.6] (3,273,779 samples, 0.02%)</title><rect x="0.9041%" y="485" width="0.0184%" height="15" fill="rgb(240,125,3)" fg:x="161268240" fg:w="3273779"/><text x="1.1541%" y="495.50"></text></g><g><title>[libc.so.6] (3,273,779 samples, 0.02%)</title><rect x="0.9041%" y="469" width="0.0184%" height="15" fill="rgb(205,98,50)" fg:x="161268240" fg:w="3273779"/><text x="1.1541%" y="479.50"></text></g><g><title>anstream::adapter::strip::next_bytes (3,279,229 samples, 0.02%)</title><rect x="0.9225%" y="517" width="0.0184%" height="15" fill="rgb(205,185,37)" fg:x="164542019" fg:w="3279229"/><text x="1.1725%" y="527.50"></text></g><g><title>asn1_check_tlen (2,785,894 samples, 0.02%)</title><rect x="0.9409%" y="517" width="0.0156%" height="15" fill="rgb(238,207,15)" fg:x="167821248" fg:w="2785894"/><text x="1.1909%" y="527.50"></text></g><g><title>cargo::ops::cargo_read_manifest::read_package (2,542,464 samples, 0.01%)</title><rect x="0.9660%" y="517" width="0.0143%" height="15" fill="rgb(213,199,42)" fg:x="172311227" fg:w="2542464"/><text x="1.2160%" y="527.50"></text></g><g><title>cargo::util::toml::read_manifest (2,542,464 samples, 0.01%)</title><rect x="0.9660%" y="501" width="0.0143%" height="15" fill="rgb(235,201,11)" fg:x="172311227" fg:w="2542464"/><text x="1.2160%" y="511.50"></text></g><g><title>&lt;&lt;cargo_util_schemas::manifest::TomlManifest as serde::de::Deserialize&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::deserialize_toml::{closure#0}&gt;&gt; (2,542,464 samples, 0.01%)</title><rect x="0.9660%" y="485" width="0.0143%" height="15" fill="rgb(207,46,11)" fg:x="172311227" fg:w="2542464"/><text x="1.2160%" y="495.50"></text></g><g><title>cargo::util::toml::normalize_toml (4,634,974 samples, 0.03%)</title><rect x="0.9803%" y="517" width="0.0260%" height="15" fill="rgb(241,35,35)" fg:x="174853691" fg:w="4634974"/><text x="1.2303%" y="527.50"></text></g><g><title>cargo::util::toml::normalize_package_toml (4,634,974 samples, 0.03%)</title><rect x="0.9803%" y="501" width="0.0260%" height="15" fill="rgb(243,32,47)" fg:x="174853691" fg:w="4634974"/><text x="1.2303%" y="511.50"></text></g><g><title>std::path::Path::is_file (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="485" width="0.0160%" height="15" fill="rgb(247,202,23)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="495.50"></text></g><g><title>std::fs::metadata (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="469" width="0.0160%" height="15" fill="rgb(219,102,11)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="479.50"></text></g><g><title>std::sys::pal::unix::fs::stat (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="453" width="0.0160%" height="15" fill="rgb(243,110,44)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="463.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="437" width="0.0160%" height="15" fill="rgb(222,74,54)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="447.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="421" width="0.0160%" height="15" fill="rgb(216,99,12)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="431.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="405" width="0.0160%" height="15" fill="rgb(226,22,26)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="415.50"></text></g><g><title>std::sys::pal::unix::fs::stat::_{{closure}} (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="389" width="0.0160%" height="15" fill="rgb(217,163,10)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="399.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="373" width="0.0160%" height="15" fill="rgb(213,25,53)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="383.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx::statx (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="357" width="0.0160%" height="15" fill="rgb(252,105,26)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="367.50"></text></g><g><title>statx (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="341" width="0.0160%" height="15" fill="rgb(220,39,43)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="351.50"></text></g><g><title>[unknown] (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="325" width="0.0160%" height="15" fill="rgb(229,68,48)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="335.50"></text></g><g><title>[unknown] (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="309" width="0.0160%" height="15" fill="rgb(252,8,32)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="319.50"></text></g><g><title>[unknown] (2,861,815 samples, 0.02%)</title><rect x="0.9902%" y="293" width="0.0160%" height="15" fill="rgb(223,20,43)" fg:x="176626850" fg:w="2861815"/><text x="1.2402%" y="303.50"></text></g><g><title>cargo_util_schemas::restricted_names::validate_profile_name (2,739,088 samples, 0.02%)</title><rect x="1.0078%" y="517" width="0.0154%" height="15" fill="rgb(229,81,49)" fg:x="179756383" fg:w="2739088"/><text x="1.2578%" y="527.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear::&lt;core::iter::adapters::map::Map&lt;alloc::collections::btree::map::Iter&lt;alloc::string::String, cargo_util_schemas::manifest::TomlLint&gt;, cargo::util::toml::lints_to_rustflags::{closure#1}::{closure#0}&gt;, (i8, core::cmp::Reverse&lt;&amp;alloc::string::String&gt;, alloc::string::String), &lt;core::iter::adapters::map::Map&lt;alloc::collections::btree::map::Iter&lt;alloc::string::String, cargo_util_schemas::manifest::TomlLint&gt;, cargo::util::toml::lints_to_rustflags::{closure#1}::{closure#0}&gt; as core::iter::traits::iterator::Iterator&gt;::next&gt; (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="517" width="0.0153%" height="15" fill="rgb(236,28,36)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="501" width="0.0153%" height="15" fill="rgb(249,185,26)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="485" width="0.0153%" height="15" fill="rgb(249,174,33)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="469" width="0.0153%" height="15" fill="rgb(233,201,37)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="479.50"></text></g><g><title>core::fmt::write (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="453" width="0.0153%" height="15" fill="rgb(221,78,26)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="437" width="0.0153%" height="15" fill="rgb(250,127,30)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="421" width="0.0153%" height="15" fill="rgb(230,49,44)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="431.50"></text></g><g><title>alloc::string::String::push_str (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="405" width="0.0153%" height="15" fill="rgb(229,67,23)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="389" width="0.0153%" height="15" fill="rgb(249,83,47)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="373" width="0.0153%" height="15" fill="rgb(215,43,3)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="357" width="0.0153%" height="15" fill="rgb(238,154,13)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="341" width="0.0153%" height="15" fill="rgb(219,56,2)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="325" width="0.0153%" height="15" fill="rgb(233,0,4)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="309" width="0.0153%" height="15" fill="rgb(235,30,7)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="293" width="0.0153%" height="15" fill="rgb(250,79,13)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="277" width="0.0153%" height="15" fill="rgb(211,146,34)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="287.50"></text></g><g><title>__rdl_realloc (2,733,072 samples, 0.02%)</title><rect x="1.0231%" y="261" width="0.0153%" height="15" fill="rgb(228,22,38)" fg:x="182495471" fg:w="2733072"/><text x="1.2731%" y="271.50"></text></g><g><title>core::ptr::drop_in_place::&lt;alloc::collections::btree::map::BTreeMap&lt;cargo_util_schemas::manifest::FeatureName, alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (3,357,248 samples, 0.02%)</title><rect x="1.0385%" y="517" width="0.0188%" height="15" fill="rgb(235,168,5)" fg:x="185228543" fg:w="3357248"/><text x="1.2885%" y="527.50"></text></g><g><title>cfree (3,357,248 samples, 0.02%)</title><rect x="1.0385%" y="501" width="0.0188%" height="15" fill="rgb(221,155,16)" fg:x="185228543" fg:w="3357248"/><text x="1.2885%" y="511.50"></text></g><g><title>core::ptr::drop_in_place::&lt;alloc::collections::btree::map::BTreeMap&lt;cargo_util_schemas::manifest::PackageName, cargo_util_schemas::manifest::InheritableDependency&gt;&gt; (2,971,763 samples, 0.02%)</title><rect x="1.0573%" y="517" width="0.0167%" height="15" fill="rgb(215,215,53)" fg:x="188585791" fg:w="2971763"/><text x="1.3073%" y="527.50"></text></g><g><title>cfree (2,971,763 samples, 0.02%)</title><rect x="1.0573%" y="501" width="0.0167%" height="15" fill="rgb(223,4,10)" fg:x="188585791" fg:w="2971763"/><text x="1.3073%" y="511.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::core::package::PackageSet&gt; (3,383,791 samples, 0.02%)</title><rect x="1.0739%" y="517" width="0.0190%" height="15" fill="rgb(234,103,6)" fg:x="191557554" fg:w="3383791"/><text x="1.3239%" y="527.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::core::manifest::Manifest&gt; (3,383,791 samples, 0.02%)</title><rect x="1.0739%" y="501" width="0.0190%" height="15" fill="rgb(227,97,0)" fg:x="191557554" fg:w="3383791"/><text x="1.3239%" y="511.50"></text></g><g><title>cfree (3,383,791 samples, 0.02%)</title><rect x="1.0739%" y="485" width="0.0190%" height="15" fill="rgb(234,150,53)" fg:x="191557554" fg:w="3383791"/><text x="1.3239%" y="495.50"></text></g><g><title>[libc.so.6] (3,383,791 samples, 0.02%)</title><rect x="1.0739%" y="469" width="0.0190%" height="15" fill="rgb(228,201,54)" fg:x="191557554" fg:w="3383791"/><text x="1.3239%" y="479.50"></text></g><g><title>[libc.so.6] (3,383,791 samples, 0.02%)</title><rect x="1.0739%" y="453" width="0.0190%" height="15" fill="rgb(222,22,37)" fg:x="191557554" fg:w="3383791"/><text x="1.3239%" y="463.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::sources::registry::index::IndexPackage&gt; (2,456,050 samples, 0.01%)</title><rect x="1.0929%" y="517" width="0.0138%" height="15" fill="rgb(237,53,32)" fg:x="194941345" fg:w="2456050"/><text x="1.3429%" y="527.50"></text></g><g><title>core::ptr::drop_in_place::&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::deserialize_toml::{closure#0}&gt;&gt; (2,567,703 samples, 0.01%)</title><rect x="1.1067%" y="517" width="0.0144%" height="15" fill="rgb(233,25,53)" fg:x="197397395" fg:w="2567703"/><text x="1.3567%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;serde_value::Value, serde_value::Value&gt;&gt;::dying_next (2,567,703 samples, 0.01%)</title><rect x="1.1067%" y="501" width="0.0144%" height="15" fill="rgb(210,40,34)" fg:x="197397395" fg:w="2567703"/><text x="1.3567%" y="511.50"></text></g><g><title>core::ptr::drop_in_place::&lt;winnow::error::ErrMode&lt;winnow::error::ContextError&gt;&gt; (2,776,910 samples, 0.02%)</title><rect x="1.1211%" y="517" width="0.0156%" height="15" fill="rgb(241,220,44)" fg:x="199965098" fg:w="2776910"/><text x="1.3711%" y="527.50"></text></g><g><title>cfree (2,776,910 samples, 0.02%)</title><rect x="1.1211%" y="501" width="0.0156%" height="15" fill="rgb(235,28,35)" fg:x="199965098" fg:w="2776910"/><text x="1.3711%" y="511.50"></text></g><g><title>evp_decodeblock_int (2,606,516 samples, 0.01%)</title><rect x="1.1366%" y="517" width="0.0146%" height="15" fill="rgb(210,56,17)" fg:x="202742008" fg:w="2606516"/><text x="1.3866%" y="527.50"></text></g><g><title>git_futils_filestamp_check (3,083,866 samples, 0.02%)</title><rect x="1.1513%" y="517" width="0.0173%" height="15" fill="rgb(224,130,29)" fg:x="205348524" fg:w="3083866"/><text x="1.4013%" y="527.50"></text></g><g><title>malloc (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="517" width="0.0114%" height="15" fill="rgb(235,212,8)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="527.50"></text></g><g><title>cargo::util::toml::validate_dependencies (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="501" width="0.0114%" height="15" fill="rgb(223,33,50)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="485" width="0.0114%" height="15" fill="rgb(219,149,13)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="469" width="0.0114%" height="15" fill="rgb(250,156,29)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="453" width="0.0114%" height="15" fill="rgb(216,193,19)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="463.50"></text></g><g><title>core::fmt::write (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="437" width="0.0114%" height="15" fill="rgb(216,135,14)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="421" width="0.0114%" height="15" fill="rgb(241,47,5)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="405" width="0.0114%" height="15" fill="rgb(233,42,35)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="415.50"></text></g><g><title>alloc::string::String::push_str (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="389" width="0.0114%" height="15" fill="rgb(231,13,6)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="373" width="0.0114%" height="15" fill="rgb(207,181,40)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="357" width="0.0114%" height="15" fill="rgb(254,173,49)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="341" width="0.0114%" height="15" fill="rgb(221,1,38)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="325" width="0.0114%" height="15" fill="rgb(206,124,46)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="309" width="0.0114%" height="15" fill="rgb(249,21,11)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="293" width="0.0114%" height="15" fill="rgb(222,201,40)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="277" width="0.0114%" height="15" fill="rgb(235,61,29)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="261" width="0.0114%" height="15" fill="rgb(219,207,3)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="245" width="0.0114%" height="15" fill="rgb(222,56,46)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="229" width="0.0114%" height="15" fill="rgb(239,76,54)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="213" width="0.0114%" height="15" fill="rgb(231,124,27)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="223.50"></text></g><g><title>alloc::alloc::realloc (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="197" width="0.0114%" height="15" fill="rgb(249,195,6)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="207.50"></text></g><g><title>realloc (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="181" width="0.0114%" height="15" fill="rgb(237,174,47)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="191.50"></text></g><g><title>[libc.so.6] (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="165" width="0.0114%" height="15" fill="rgb(206,201,31)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="175.50"></text></g><g><title>[libc.so.6] (2,036,239 samples, 0.01%)</title><rect x="1.1685%" y="149" width="0.0114%" height="15" fill="rgb(231,57,52)" fg:x="208432390" fg:w="2036239"/><text x="1.4185%" y="159.50"></text></g><g><title>ossl_ctype_check (3,014,791 samples, 0.02%)</title><rect x="1.1800%" y="517" width="0.0169%" height="15" fill="rgb(248,177,22)" fg:x="210468629" fg:w="3014791"/><text x="1.4300%" y="527.50"></text></g><g><title>sqlite3MemRealloc (2,578,945 samples, 0.01%)</title><rect x="1.1969%" y="517" width="0.0145%" height="15" fill="rgb(215,211,37)" fg:x="213483420" fg:w="2578945"/><text x="1.4469%" y="527.50"></text></g><g><title>realloc (2,578,945 samples, 0.01%)</title><rect x="1.1969%" y="501" width="0.0145%" height="15" fill="rgb(241,128,51)" fg:x="213483420" fg:w="2578945"/><text x="1.4469%" y="511.50"></text></g><g><title>[libc.so.6] (2,578,945 samples, 0.01%)</title><rect x="1.1969%" y="485" width="0.0145%" height="15" fill="rgb(227,165,31)" fg:x="213483420" fg:w="2578945"/><text x="1.4469%" y="495.50"></text></g><g><title>[libc.so.6] (2,578,945 samples, 0.01%)</title><rect x="1.1969%" y="469" width="0.0145%" height="15" fill="rgb(228,167,24)" fg:x="213483420" fg:w="2578945"/><text x="1.4469%" y="479.50"></text></g><g><title>std::sys::os_str::bytes::Buf::into_string (2,559,501 samples, 0.01%)</title><rect x="1.2113%" y="517" width="0.0143%" height="15" fill="rgb(228,143,12)" fg:x="216062365" fg:w="2559501"/><text x="1.4613%" y="527.50"></text></g><g><title>toml_edit::parser::key::key (2,759,543 samples, 0.02%)</title><rect x="1.2266%" y="517" width="0.0155%" height="15" fill="rgb(249,149,8)" fg:x="218784712" fg:w="2759543"/><text x="1.4766%" y="527.50"></text></g><g><title>cargo (222,401,446 samples, 1.25%)</title><rect x="0.0000%" y="533" width="1.2469%" height="15" fill="rgb(243,35,44)" fg:x="0" fg:w="222401446"/><text x="0.2500%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7,519,152 samples, 0.04%)</title><rect x="1.2469%" y="485" width="0.0422%" height="15" fill="rgb(246,89,9)" fg:x="222401576" fg:w="7519152"/><text x="1.4969%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7,519,152 samples, 0.04%)</title><rect x="1.2469%" y="469" width="0.0422%" height="15" fill="rgb(233,213,13)" fg:x="222401576" fg:w="7519152"/><text x="1.4969%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7,519,152 samples, 0.04%)</title><rect x="1.2469%" y="453" width="0.0422%" height="15" fill="rgb(233,141,41)" fg:x="222401576" fg:w="7519152"/><text x="1.4969%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7,519,152 samples, 0.04%)</title><rect x="1.2469%" y="437" width="0.0422%" height="15" fill="rgb(239,167,4)" fg:x="222401576" fg:w="7519152"/><text x="1.4969%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7,519,152 samples, 0.04%)</title><rect x="1.2469%" y="421" width="0.0422%" height="15" fill="rgb(209,217,16)" fg:x="222401576" fg:w="7519152"/><text x="1.4969%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7,525,485 samples, 0.04%)</title><rect x="1.2469%" y="501" width="0.0422%" height="15" fill="rgb(219,88,35)" fg:x="222401446" fg:w="7525485"/><text x="1.4969%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7,525,487 samples, 0.04%)</title><rect x="1.2469%" y="517" width="0.0422%" height="15" fill="rgb(220,193,23)" fg:x="222401446" fg:w="7525487"/><text x="1.4969%" y="527.50"></text></g><g><title>[libc.so.6] (60,798,776 samples, 0.34%)</title><rect x="1.5573%" y="389" width="0.3409%" height="15" fill="rgb(230,90,52)" fg:x="277772478" fg:w="60798776"/><text x="1.8073%" y="399.50"></text></g><g><title>[[vdso]] (7,816,232 samples, 0.04%)</title><rect x="1.9263%" y="341" width="0.0438%" height="15" fill="rgb(252,106,19)" fg:x="343596684" fg:w="7816232"/><text x="2.1763%" y="351.50"></text></g><g><title>getrandom::backends::linux_android_with_fallback::fill_inner (11,821,992 samples, 0.07%)</title><rect x="1.9173%" y="373" width="0.0663%" height="15" fill="rgb(206,74,20)" fg:x="341981978" fg:w="11821992"/><text x="2.1673%" y="383.50"></text></g><g><title>[libc.so.6] (11,624,308 samples, 0.07%)</title><rect x="1.9184%" y="357" width="0.0652%" height="15" fill="rgb(230,138,44)" fg:x="342179662" fg:w="11624308"/><text x="2.1684%" y="367.50"></text></g><g><title>__vdso_getrandom (2,391,054 samples, 0.01%)</title><rect x="1.9701%" y="341" width="0.0134%" height="15" fill="rgb(235,182,43)" fg:x="351412916" fg:w="2391054"/><text x="2.2201%" y="351.50"></text></g><g><title>rand::rngs::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (16,591,178 samples, 0.09%)</title><rect x="1.9034%" y="389" width="0.0930%" height="15" fill="rgb(242,16,51)" fg:x="339506686" fg:w="16591178"/><text x="2.1534%" y="399.50"></text></g><g><title>rand_chacha::guts::init_chacha (2,293,894 samples, 0.01%)</title><rect x="1.9835%" y="373" width="0.0129%" height="15" fill="rgb(248,9,4)" fg:x="353803970" fg:w="2293894"/><text x="2.2335%" y="383.50"></text></g><g><title>rand_chacha::guts::refill_wide (20,857,052 samples, 0.12%)</title><rect x="1.9964%" y="389" width="0.1169%" height="15" fill="rgb(210,31,22)" fg:x="356097864" fg:w="20857052"/><text x="2.2464%" y="399.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1,063,481,977 samples, 5.96%)</title><rect x="2.1133%" y="389" width="5.9622%" height="15" fill="rgb(239,54,39)" fg:x="376954916" fg:w="1063481977"/><text x="2.3633%" y="399.50">rand_cha..</text></g><g><title>std::io::Write::write_all (3,076,247 samples, 0.02%)</title><rect x="8.0756%" y="389" width="0.0172%" height="15" fill="rgb(230,99,41)" fg:x="1440436893" fg:w="3076247"/><text x="8.3256%" y="399.50"></text></g><g><title>_start (1,213,456,793 samples, 6.80%)</title><rect x="1.2974%" y="517" width="6.8030%" height="15" fill="rgb(253,106,12)" fg:x="231418180" fg:w="1213456793"/><text x="1.5474%" y="527.50">_start</text></g><g><title>__libc_start_main (1,213,456,793 samples, 6.80%)</title><rect x="1.2974%" y="501" width="6.8030%" height="15" fill="rgb(213,46,41)" fg:x="231418180" fg:w="1213456793"/><text x="1.5474%" y="511.50">__libc_st..</text></g><g><title>[libc.so.6] (1,213,456,793 samples, 6.80%)</title><rect x="1.2974%" y="485" width="6.8030%" height="15" fill="rgb(215,133,35)" fg:x="231418180" fg:w="1213456793"/><text x="1.5474%" y="495.50">[libc.so...</text></g><g><title>main (1,213,456,793 samples, 6.80%)</title><rect x="1.2974%" y="469" width="6.8030%" height="15" fill="rgb(213,28,5)" fg:x="231418180" fg:w="1213456793"/><text x="1.5474%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (1,213,456,792 samples, 6.80%)</title><rect x="1.2974%" y="453" width="6.8030%" height="15" fill="rgb(215,77,49)" fg:x="231418181" fg:w="1213456792"/><text x="1.5474%" y="463.50">std::rt::..</text></g><g><title>std::rt::lang_start::{{closure}} (1,213,019,522 samples, 6.80%)</title><rect x="1.2999%" y="437" width="6.8006%" height="15" fill="rgb(248,100,22)" fg:x="231855451" fg:w="1213019522"/><text x="1.5499%" y="447.50">std::rt::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,213,019,522 samples, 6.80%)</title><rect x="1.2999%" y="421" width="6.8006%" height="15" fill="rgb(208,67,9)" fg:x="231855451" fg:w="1213019522"/><text x="1.5499%" y="431.50">std::sys:..</text></g><g><title>cipher_bench::main (1,213,019,522 samples, 6.80%)</title><rect x="1.2999%" y="405" width="6.8006%" height="15" fill="rgb(219,133,21)" fg:x="231855451" fg:w="1213019522"/><text x="1.5499%" y="415.50">cipher_be..</text></g><g><title>cipher_bench-6a (1,222,473,529 samples, 6.85%)</title><rect x="1.2469%" y="533" width="6.8536%" height="15" fill="rgb(246,46,29)" fg:x="222401446" fg:w="1222473529"/><text x="1.4969%" y="543.50">cipher_be..</text></g><g><title>[gnuplot] (2,683,874 samples, 0.02%)</title><rect x="8.1005%" y="517" width="0.0150%" height="15" fill="rgb(246,185,52)" fg:x="1444874975" fg:w="2683874"/><text x="8.3505%" y="527.50"></text></g><g><title>__libc_start_main (2,683,874 samples, 0.02%)</title><rect x="8.1005%" y="501" width="0.0150%" height="15" fill="rgb(252,136,11)" fg:x="1444874975" fg:w="2683874"/><text x="8.3505%" y="511.50"></text></g><g><title>[libc.so.6] (2,683,874 samples, 0.02%)</title><rect x="8.1005%" y="485" width="0.0150%" height="15" fill="rgb(219,138,53)" fg:x="1444874975" fg:w="2683874"/><text x="8.3505%" y="495.50"></text></g><g><title>exit (2,683,874 samples, 0.02%)</title><rect x="8.1005%" y="469" width="0.0150%" height="15" fill="rgb(211,51,23)" fg:x="1444874975" fg:w="2683874"/><text x="8.3505%" y="479.50"></text></g><g><title>[libc.so.6] (2,683,874 samples, 0.02%)</title><rect x="8.1005%" y="453" width="0.0150%" height="15" fill="rgb(247,221,28)" fg:x="1444874975" fg:w="2683874"/><text x="8.3505%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,683,874 samples, 0.02%)</title><rect x="8.1005%" y="437" width="0.0150%" height="15" fill="rgb(251,222,45)" fg:x="1444874975" fg:w="2683874"/><text x="8.3505%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,683,874 samples, 0.02%)</title><rect x="8.1005%" y="421" width="0.0150%" height="15" fill="rgb(217,162,53)" fg:x="1444874975" fg:w="2683874"/><text x="8.3505%" y="431.50"></text></g><g><title>[libwx_gtk3u_core-3.2.so.0.4.0] (2,683,874 samples, 0.02%)</title><rect x="8.1005%" y="405" width="0.0150%" height="15" fill="rgb(229,93,14)" fg:x="1444874975" fg:w="2683874"/><text x="8.3505%" y="415.50"></text></g><g><title>__cxa_finalize (2,683,874 samples, 0.02%)</title><rect x="8.1005%" y="389" width="0.0150%" height="15" fill="rgb(209,67,49)" fg:x="1444874975" fg:w="2683874"/><text x="8.3505%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (143,252,444 samples, 0.80%)</title><rect x="8.1738%" y="421" width="0.8031%" height="15" fill="rgb(213,87,29)" fg:x="1457962068" fg:w="143252444"/><text x="8.4238%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (128,775,639 samples, 0.72%)</title><rect x="8.2550%" y="405" width="0.7220%" height="15" fill="rgb(205,151,52)" fg:x="1472438873" fg:w="128775639"/><text x="8.5050%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (15,059,528 samples, 0.08%)</title><rect x="8.8925%" y="389" width="0.0844%" height="15" fill="rgb(253,215,39)" fg:x="1586154984" fg:w="15059528"/><text x="9.1425%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5,489,308 samples, 0.03%)</title><rect x="8.9462%" y="373" width="0.0308%" height="15" fill="rgb(221,220,41)" fg:x="1595725204" fg:w="5489308"/><text x="9.1962%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (157,717,432 samples, 0.88%)</title><rect x="8.1180%" y="437" width="0.8842%" height="15" fill="rgb(218,133,21)" fg:x="1447997467" fg:w="157717432"/><text x="8.3680%" y="447.50"></text></g><g><title>[unknown] (4,500,387 samples, 0.03%)</title><rect x="8.9769%" y="421" width="0.0252%" height="15" fill="rgb(221,193,43)" fg:x="1601214512" fg:w="4500387"/><text x="9.2269%" y="431.50"></text></g><g><title>[unknown] (4,500,387 samples, 0.03%)</title><rect x="8.9769%" y="405" width="0.0252%" height="15" fill="rgb(240,128,52)" fg:x="1601214512" fg:w="4500387"/><text x="9.2269%" y="415.50"></text></g><g><title>[unknown] (4,500,387 samples, 0.03%)</title><rect x="8.9769%" y="389" width="0.0252%" height="15" fill="rgb(253,114,12)" fg:x="1601214512" fg:w="4500387"/><text x="9.2269%" y="399.50"></text></g><g><title>[unknown] (4,500,387 samples, 0.03%)</title><rect x="8.9769%" y="373" width="0.0252%" height="15" fill="rgb(215,223,47)" fg:x="1601214512" fg:w="4500387"/><text x="9.2269%" y="383.50"></text></g><g><title>[unknown] (4,500,387 samples, 0.03%)</title><rect x="8.9769%" y="357" width="0.0252%" height="15" fill="rgb(248,225,23)" fg:x="1601214512" fg:w="4500387"/><text x="9.2269%" y="367.50"></text></g><g><title>[unknown] (2,221,959 samples, 0.01%)</title><rect x="8.9897%" y="341" width="0.0125%" height="15" fill="rgb(250,108,0)" fg:x="1603492940" fg:w="2221959"/><text x="9.2397%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (12,414,536 samples, 0.07%)</title><rect x="9.0022%" y="389" width="0.0696%" height="15" fill="rgb(228,208,7)" fg:x="1605715173" fg:w="12414536"/><text x="9.2522%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5,668,506 samples, 0.03%)</title><rect x="9.0400%" y="373" width="0.0318%" height="15" fill="rgb(244,45,10)" fg:x="1612461203" fg:w="5668506"/><text x="9.2900%" y="383.50"></text></g><g><title>[unknown] (2,786,717 samples, 0.02%)</title><rect x="9.0562%" y="357" width="0.0156%" height="15" fill="rgb(207,125,25)" fg:x="1615342992" fg:w="2786717"/><text x="9.3062%" y="367.50"></text></g><g><title>[unknown] (2,786,717 samples, 0.02%)</title><rect x="9.0562%" y="341" width="0.0156%" height="15" fill="rgb(210,195,18)" fg:x="1615342992" fg:w="2786717"/><text x="9.3062%" y="351.50"></text></g><g><title>[unknown] (2,786,717 samples, 0.02%)</title><rect x="9.0562%" y="325" width="0.0156%" height="15" fill="rgb(249,80,12)" fg:x="1615342992" fg:w="2786717"/><text x="9.3062%" y="335.50"></text></g><g><title>[unknown] (2,763,991 samples, 0.02%)</title><rect x="9.0563%" y="309" width="0.0155%" height="15" fill="rgb(221,65,9)" fg:x="1615365718" fg:w="2763991"/><text x="9.3063%" y="319.50"></text></g><g><title>[unknown] (2,763,991 samples, 0.02%)</title><rect x="9.0563%" y="293" width="0.0155%" height="15" fill="rgb(235,49,36)" fg:x="1615365718" fg:w="2763991"/><text x="9.3063%" y="303.50"></text></g><g><title>[unknown] (2,763,991 samples, 0.02%)</title><rect x="9.0563%" y="277" width="0.0155%" height="15" fill="rgb(225,32,20)" fg:x="1615365718" fg:w="2763991"/><text x="9.3063%" y="287.50"></text></g><g><title>[unknown] (2,243,136 samples, 0.01%)</title><rect x="9.0592%" y="261" width="0.0126%" height="15" fill="rgb(215,141,46)" fg:x="1615886573" fg:w="2243136"/><text x="9.3092%" y="271.50"></text></g><g><title>[unknown] (2,243,136 samples, 0.01%)</title><rect x="9.0592%" y="245" width="0.0126%" height="15" fill="rgb(250,160,47)" fg:x="1615886573" fg:w="2243136"/><text x="9.3092%" y="255.50"></text></g><g><title>[unknown] (2,243,136 samples, 0.01%)</title><rect x="9.0592%" y="229" width="0.0126%" height="15" fill="rgb(216,222,40)" fg:x="1615886573" fg:w="2243136"/><text x="9.3092%" y="239.50"></text></g><g><title>[unknown] (2,243,136 samples, 0.01%)</title><rect x="9.0592%" y="213" width="0.0126%" height="15" fill="rgb(234,217,39)" fg:x="1615886573" fg:w="2243136"/><text x="9.3092%" y="223.50"></text></g><g><title>[ld-linux-x86-64.so.2] (170,575,093 samples, 0.96%)</title><rect x="8.1155%" y="469" width="0.9563%" height="15" fill="rgb(207,178,40)" fg:x="1447558850" fg:w="170575093"/><text x="8.3655%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (170,575,093 samples, 0.96%)</title><rect x="8.1155%" y="453" width="0.9563%" height="15" fill="rgb(221,136,13)" fg:x="1447558850" fg:w="170575093"/><text x="8.3655%" y="463.50"></text></g><g><title>_dl_catch_exception (12,419,044 samples, 0.07%)</title><rect x="9.0022%" y="437" width="0.0696%" height="15" fill="rgb(249,199,10)" fg:x="1605714899" fg:w="12419044"/><text x="9.2522%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (12,419,044 samples, 0.07%)</title><rect x="9.0022%" y="421" width="0.0696%" height="15" fill="rgb(249,222,13)" fg:x="1605714899" fg:w="12419044"/><text x="9.2522%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (12,419,044 samples, 0.07%)</title><rect x="9.0022%" y="405" width="0.0696%" height="15" fill="rgb(244,185,38)" fg:x="1605714899" fg:w="12419044"/><text x="9.2522%" y="415.50"></text></g><g><title>[libgobject-2.0.so.0.8400.1] (2,759,176 samples, 0.02%)</title><rect x="9.0718%" y="469" width="0.0155%" height="15" fill="rgb(236,202,9)" fg:x="1618133943" fg:w="2759176"/><text x="9.3218%" y="479.50"></text></g><g><title>[libgobject-2.0.so.0.8400.1] (2,759,176 samples, 0.02%)</title><rect x="9.0718%" y="453" width="0.0155%" height="15" fill="rgb(250,229,37)" fg:x="1618133943" fg:w="2759176"/><text x="9.3218%" y="463.50"></text></g><g><title>g_param_type_register_static (2,759,176 samples, 0.02%)</title><rect x="9.0718%" y="437" width="0.0155%" height="15" fill="rgb(206,174,23)" fg:x="1618133943" fg:w="2759176"/><text x="9.3218%" y="447.50"></text></g><g><title>g_type_register_static (2,759,176 samples, 0.02%)</title><rect x="9.0718%" y="421" width="0.0155%" height="15" fill="rgb(211,33,43)" fg:x="1618133943" fg:w="2759176"/><text x="9.3218%" y="431.50"></text></g><g><title>[libgobject-2.0.so.0.8400.1] (2,759,176 samples, 0.02%)</title><rect x="9.0718%" y="405" width="0.0155%" height="15" fill="rgb(245,58,50)" fg:x="1618133943" fg:w="2759176"/><text x="9.3218%" y="415.50"></text></g><g><title>g_realloc_n (2,759,176 samples, 0.02%)</title><rect x="9.0718%" y="389" width="0.0155%" height="15" fill="rgb(244,68,36)" fg:x="1618133943" fg:w="2759176"/><text x="9.3218%" y="399.50"></text></g><g><title>alloc_and_init_significant_coeff_ctxIdx_lookupTable (2,511,485 samples, 0.01%)</title><rect x="9.0873%" y="421" width="0.0141%" height="15" fill="rgb(232,229,15)" fg:x="1620893119" fg:w="2511485"/><text x="9.3373%" y="431.50"></text></g><g><title>[libheif.so.1.19.7] (7,592,078 samples, 0.04%)</title><rect x="9.0873%" y="469" width="0.0426%" height="15" fill="rgb(254,30,23)" fg:x="1620893119" fg:w="7592078"/><text x="9.3373%" y="479.50"></text></g><g><title>[libheif.so.1.19.7] (7,592,078 samples, 0.04%)</title><rect x="9.0873%" y="453" width="0.0426%" height="15" fill="rgb(235,160,14)" fg:x="1620893119" fg:w="7592078"/><text x="9.3373%" y="463.50"></text></g><g><title>de265_init (7,592,078 samples, 0.04%)</title><rect x="9.0873%" y="437" width="0.0426%" height="15" fill="rgb(212,155,44)" fg:x="1620893119" fg:w="7592078"/><text x="9.3373%" y="447.50"></text></g><g><title>init_scan_orders (5,080,593 samples, 0.03%)</title><rect x="9.1013%" y="421" width="0.0285%" height="15" fill="rgb(226,2,50)" fg:x="1623404604" fg:w="5080593"/><text x="9.3513%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (180,966,935 samples, 1.01%)</title><rect x="8.1155%" y="485" width="1.0146%" height="15" fill="rgb(234,177,6)" fg:x="1447558850" fg:w="180966935"/><text x="8.3655%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (180,969,879 samples, 1.01%)</title><rect x="8.1155%" y="501" width="1.0146%" height="15" fill="rgb(217,24,9)" fg:x="1447558849" fg:w="180969879"/><text x="8.3655%" y="511.50"></text></g><g><title>gnuplot (183,653,754 samples, 1.03%)</title><rect x="8.1005%" y="533" width="1.0296%" height="15" fill="rgb(220,13,46)" fg:x="1444874975" fg:w="183653754"/><text x="8.3505%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (180,969,880 samples, 1.01%)</title><rect x="8.1155%" y="517" width="1.0146%" height="15" fill="rgb(239,221,27)" fg:x="1447558849" fg:w="180969880"/><text x="8.3655%" y="527.50"></text></g><g><title>[unknown] (3,404,137 samples, 0.02%)</title><rect x="9.1301%" y="485" width="0.0191%" height="15" fill="rgb(222,198,25)" fg:x="1628528730" fg:w="3404137"/><text x="9.3801%" y="495.50"></text></g><g><title>[libc.so.6] (464,512,571 samples, 2.60%)</title><rect x="28.4549%" y="341" width="2.6042%" height="15" fill="rgb(211,99,13)" fg:x="5075493315" fg:w="464512571"/><text x="28.7049%" y="351.50">[l..</text></g><g><title>__rdl_alloc (123,117,241 samples, 0.69%)</title><rect x="31.0591%" y="341" width="0.6902%" height="15" fill="rgb(232,111,31)" fg:x="5540005886" fg:w="123117241"/><text x="31.3091%" y="351.50"></text></g><g><title>__rust_alloc (230,578,506 samples, 1.29%)</title><rect x="31.7494%" y="341" width="1.2927%" height="15" fill="rgb(245,82,37)" fg:x="5663123127" fg:w="230578506"/><text x="31.9994%" y="351.50"></text></g><g><title>&lt;cipher_bench::IdentityCipher as lab_1::crypto::cipher_traits::SymmetricCipherWithRounds&gt;::encrypt_block (4,086,570,320 samples, 22.91%)</title><rect x="24.0344%" y="357" width="22.9107%" height="15" fill="rgb(227,149,46)" fg:x="4287011424" fg:w="4086570320"/><text x="24.2844%" y="367.50">&lt;cipher_bench::IdentityCipher as lab..</text></g><g><title>malloc (2,479,880,111 samples, 13.90%)</title><rect x="33.0421%" y="341" width="13.9030%" height="15" fill="rgb(218,36,50)" fg:x="5893701633" fg:w="2479880111"/><text x="33.2921%" y="351.50">malloc</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (117,050,369 samples, 0.66%)</title><rect x="46.9451%" y="357" width="0.6562%" height="15" fill="rgb(226,80,48)" fg:x="8373581744" fg:w="117050369"/><text x="47.1951%" y="367.50"></text></g><g><title>read (117,050,369 samples, 0.66%)</title><rect x="46.9451%" y="341" width="0.6562%" height="15" fill="rgb(238,224,15)" fg:x="8373581744" fg:w="117050369"/><text x="47.1951%" y="351.50"></text></g><g><title>[libc.so.6] (117,050,369 samples, 0.66%)</title><rect x="46.9451%" y="325" width="0.6562%" height="15" fill="rgb(241,136,10)" fg:x="8373581744" fg:w="117050369"/><text x="47.1951%" y="335.50"></text></g><g><title>[libc.so.6] (117,050,369 samples, 0.66%)</title><rect x="46.9451%" y="309" width="0.6562%" height="15" fill="rgb(208,32,45)" fg:x="8373581744" fg:w="117050369"/><text x="47.1951%" y="319.50"></text></g><g><title>[libc.so.6] (113,646,858 samples, 0.64%)</title><rect x="46.9642%" y="293" width="0.6371%" height="15" fill="rgb(207,135,9)" fg:x="8376985255" fg:w="113646858"/><text x="47.2142%" y="303.50"></text></g><g><title>[unknown] (113,646,858 samples, 0.64%)</title><rect x="46.9642%" y="277" width="0.6371%" height="15" fill="rgb(206,86,44)" fg:x="8376985255" fg:w="113646858"/><text x="47.2142%" y="287.50"></text></g><g><title>[unknown] (113,646,858 samples, 0.64%)</title><rect x="46.9642%" y="261" width="0.6371%" height="15" fill="rgb(245,177,15)" fg:x="8376985255" fg:w="113646858"/><text x="47.2142%" y="271.50"></text></g><g><title>[unknown] (110,575,486 samples, 0.62%)</title><rect x="46.9814%" y="245" width="0.6199%" height="15" fill="rgb(206,64,50)" fg:x="8380056627" fg:w="110575486"/><text x="47.2314%" y="255.50"></text></g><g><title>[unknown] (110,575,486 samples, 0.62%)</title><rect x="46.9814%" y="229" width="0.6199%" height="15" fill="rgb(234,36,40)" fg:x="8380056627" fg:w="110575486"/><text x="47.2314%" y="239.50"></text></g><g><title>[unknown] (88,199,966 samples, 0.49%)</title><rect x="47.1068%" y="213" width="0.4945%" height="15" fill="rgb(213,64,8)" fg:x="8402432147" fg:w="88199966"/><text x="47.3568%" y="223.50"></text></g><g><title>[unknown] (62,209,036 samples, 0.35%)</title><rect x="47.2526%" y="197" width="0.3488%" height="15" fill="rgb(210,75,36)" fg:x="8428423077" fg:w="62209036"/><text x="47.5026%" y="207.50"></text></g><g><title>[unknown] (52,835,310 samples, 0.30%)</title><rect x="47.3051%" y="181" width="0.2962%" height="15" fill="rgb(229,88,21)" fg:x="8437796803" fg:w="52835310"/><text x="47.5551%" y="191.50"></text></g><g><title>[unknown] (33,647,055 samples, 0.19%)</title><rect x="47.4127%" y="165" width="0.1886%" height="15" fill="rgb(252,204,47)" fg:x="8456985058" fg:w="33647055"/><text x="47.6627%" y="175.50"></text></g><g><title>[unknown] (3,274,569 samples, 0.02%)</title><rect x="47.5830%" y="149" width="0.0184%" height="15" fill="rgb(208,77,27)" fg:x="8487357544" fg:w="3274569"/><text x="47.8330%" y="159.50"></text></g><g><title>[libc.so.6] (2,288,665,314 samples, 12.83%)</title><rect x="47.6013%" y="357" width="12.8310%" height="15" fill="rgb(221,76,26)" fg:x="8490632113" fg:w="2288665314"/><text x="47.8513%" y="367.50">[libc.so.6]</text></g><g><title>__rdl_alloc (130,921,962 samples, 0.73%)</title><rect x="60.4323%" y="357" width="0.7340%" height="15" fill="rgb(225,139,18)" fg:x="10779297427" fg:w="130921962"/><text x="60.6823%" y="367.50"></text></g><g><title>__rdl_dealloc (884,353,132 samples, 4.96%)</title><rect x="61.1663%" y="357" width="4.9580%" height="15" fill="rgb(230,137,11)" fg:x="10910219389" fg:w="884353132"/><text x="61.4163%" y="367.50">__rdl_..</text></g><g><title>__rust_alloc (335,217,651 samples, 1.88%)</title><rect x="66.1243%" y="357" width="1.8793%" height="15" fill="rgb(212,28,1)" fg:x="11794572521" fg:w="335217651"/><text x="66.3743%" y="367.50">_..</text></g><g><title>__rust_dealloc (396,319,449 samples, 2.22%)</title><rect x="68.0037%" y="357" width="2.2219%" height="15" fill="rgb(248,164,17)" fg:x="12129790172" fg:w="396319449"/><text x="68.2537%" y="367.50">_..</text></g><g><title>cfree (3,456,577,052 samples, 19.38%)</title><rect x="70.2256%" y="357" width="19.3787%" height="15" fill="rgb(222,171,42)" fg:x="12526109621" fg:w="3456577052"/><text x="70.4756%" y="367.50">cfree</text></g><g><title>[unknown] (2,768,790 samples, 0.02%)</title><rect x="89.5888%" y="341" width="0.0155%" height="15" fill="rgb(243,84,45)" fg:x="15979917883" fg:w="2768790"/><text x="89.8388%" y="351.50"></text></g><g><title>[unknown] (2,768,720 samples, 0.02%)</title><rect x="89.5888%" y="325" width="0.0155%" height="15" fill="rgb(252,49,23)" fg:x="15979917953" fg:w="2768720"/><text x="89.8388%" y="335.50"></text></g><g><title>[unknown] (2,768,720 samples, 0.02%)</title><rect x="89.5888%" y="309" width="0.0155%" height="15" fill="rgb(215,19,7)" fg:x="15979917953" fg:w="2768720"/><text x="89.8388%" y="319.50"></text></g><g><title>[unknown] (2,768,720 samples, 0.02%)</title><rect x="89.5888%" y="293" width="0.0155%" height="15" fill="rgb(238,81,41)" fg:x="15979917953" fg:w="2768720"/><text x="89.8388%" y="303.50"></text></g><g><title>malloc (1,789,499,218 samples, 10.03%)</title><rect x="89.6043%" y="357" width="10.0325%" height="15" fill="rgb(210,199,37)" fg:x="15982686673" fg:w="1789499218"/><text x="89.8543%" y="367.50">malloc</text></g><g><title>[libc.so.6] (16,198,455,482 samples, 90.81%)</title><rect x="9.1301%" y="517" width="90.8140%" height="15" fill="rgb(244,192,49)" fg:x="1628528730" fg:w="16198455482"/><text x="9.3801%" y="527.50">[libc.so.6]</text></g><g><title>[libc.so.6] (16,198,455,482 samples, 90.81%)</title><rect x="9.1301%" y="501" width="90.8140%" height="15" fill="rgb(226,211,11)" fg:x="1628528730" fg:w="16198455482"/><text x="9.3801%" y="511.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (16,195,051,345 samples, 90.79%)</title><rect x="9.1492%" y="485" width="90.7949%" height="15" fill="rgb(236,162,54)" fg:x="1631932867" fg:w="16195051345"/><text x="9.3992%" y="495.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (16,195,051,345 samples, 90.79%)</title><rect x="9.1492%" y="469" width="90.7949%" height="15" fill="rgb(220,229,9)" fg:x="1631932867" fg:w="16195051345"/><text x="9.3992%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (16,195,051,345 samples, 90.79%)</title><rect x="9.1492%" y="453" width="90.7949%" height="15" fill="rgb(250,87,22)" fg:x="1631932867" fg:w="16195051345"/><text x="9.3992%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (16,195,051,345 samples, 90.79%)</title><rect x="9.1492%" y="437" width="90.7949%" height="15" fill="rgb(239,43,17)" fg:x="1631932867" fg:w="16195051345"/><text x="9.3992%" y="447.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (16,195,051,345 samples, 90.79%)</title><rect x="9.1492%" y="421" width="90.7949%" height="15" fill="rgb(231,177,25)" fg:x="1631932867" fg:w="16195051345"/><text x="9.3992%" y="431.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (16,195,051,345 samples, 90.79%)</title><rect x="9.1492%" y="405" width="90.7949%" height="15" fill="rgb(219,179,1)" fg:x="1631932867" fg:w="16195051345"/><text x="9.3992%" y="415.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (16,195,051,345 samples, 90.79%)</title><rect x="9.1492%" y="389" width="90.7949%" height="15" fill="rgb(238,219,53)" fg:x="1631932867" fg:w="16195051345"/><text x="9.3992%" y="399.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>lab_1::crypto::cipher_context::CipherContext::process_chunked_parallel (16,195,051,345 samples, 90.79%)</title><rect x="9.1492%" y="373" width="90.7949%" height="15" fill="rgb(232,167,36)" fg:x="1631932867" fg:w="16195051345"/><text x="9.3992%" y="383.50">lab_1::crypto::cipher_context::CipherContext::process_chunked_parallel</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (54,798,321 samples, 0.31%)</title><rect x="99.6368%" y="357" width="0.3072%" height="15" fill="rgb(244,19,51)" fg:x="17772185891" fg:w="54798321"/><text x="99.8868%" y="367.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (52,197,835 samples, 0.29%)</title><rect x="99.6514%" y="341" width="0.2926%" height="15" fill="rgb(224,6,22)" fg:x="17774786377" fg:w="52197835"/><text x="99.9014%" y="351.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="325" width="0.2926%" height="15" fill="rgb(224,145,5)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="335.50"></text></g><g><title>write (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="309" width="0.2926%" height="15" fill="rgb(234,130,49)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="319.50"></text></g><g><title>[libc.so.6] (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="293" width="0.2926%" height="15" fill="rgb(254,6,2)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="303.50"></text></g><g><title>[libc.so.6] (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="277" width="0.2926%" height="15" fill="rgb(208,96,46)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="287.50"></text></g><g><title>[libc.so.6] (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="261" width="0.2926%" height="15" fill="rgb(239,3,39)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="271.50"></text></g><g><title>[unknown] (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="245" width="0.2926%" height="15" fill="rgb(233,210,1)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="255.50"></text></g><g><title>[unknown] (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="229" width="0.2926%" height="15" fill="rgb(244,137,37)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="239.50"></text></g><g><title>[unknown] (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="213" width="0.2926%" height="15" fill="rgb(240,136,2)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="223.50"></text></g><g><title>[unknown] (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="197" width="0.2926%" height="15" fill="rgb(239,18,37)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="207.50"></text></g><g><title>[unknown] (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="181" width="0.2926%" height="15" fill="rgb(218,185,22)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="191.50"></text></g><g><title>[unknown] (52,197,827 samples, 0.29%)</title><rect x="99.6514%" y="165" width="0.2926%" height="15" fill="rgb(225,218,4)" fg:x="17774786385" fg:w="52197827"/><text x="99.9014%" y="175.50"></text></g><g><title>[unknown] (49,282,610 samples, 0.28%)</title><rect x="99.6677%" y="149" width="0.2763%" height="15" fill="rgb(230,182,32)" fg:x="17777701602" fg:w="49282610"/><text x="99.9177%" y="159.50"></text></g><g><title>[unknown] (46,366,637 samples, 0.26%)</title><rect x="99.6841%" y="133" width="0.2599%" height="15" fill="rgb(242,56,43)" fg:x="17780617575" fg:w="46366637"/><text x="99.9341%" y="143.50"></text></g><g><title>[unknown] (39,698,580 samples, 0.22%)</title><rect x="99.7215%" y="117" width="0.2226%" height="15" fill="rgb(233,99,24)" fg:x="17787285632" fg:w="39698580"/><text x="99.9715%" y="127.50"></text></g><g><title>[unknown] (33,066,822 samples, 0.19%)</title><rect x="99.7586%" y="101" width="0.1854%" height="15" fill="rgb(234,209,42)" fg:x="17793917390" fg:w="33066822"/><text x="100.0086%" y="111.50"></text></g><g><title>[unknown] (19,908,029 samples, 0.11%)</title><rect x="99.8324%" y="85" width="0.1116%" height="15" fill="rgb(227,7,12)" fg:x="17807076183" fg:w="19908029"/><text x="100.0824%" y="95.50"></text></g><g><title>[unknown] (6,332,792 samples, 0.04%)</title><rect x="99.9085%" y="69" width="0.0355%" height="15" fill="rgb(245,203,43)" fg:x="17820651420" fg:w="6332792"/><text x="100.1585%" y="79.50"></text></g><g><title>[unknown] (6,332,792 samples, 0.04%)</title><rect x="99.9085%" y="53" width="0.0355%" height="15" fill="rgb(238,205,33)" fg:x="17820651420" fg:w="6332792"/><text x="100.1585%" y="63.50"></text></g><g><title>[unknown] (3,502,475 samples, 0.02%)</title><rect x="99.9244%" y="37" width="0.0196%" height="15" fill="rgb(231,56,7)" fg:x="17823481737" fg:w="3502475"/><text x="100.1744%" y="47.50"></text></g><g><title>all (17,836,966,963 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="17836966963"/><text x="0.2500%" y="559.50"></text></g><g><title>tokio-runtime-w (16,208,438,234 samples, 90.87%)</title><rect x="9.1301%" y="533" width="90.8699%" height="15" fill="rgb(234,111,31)" fg:x="1628528729" fg:w="16208438234"/><text x="9.3801%" y="543.50">tokio-runtime-w</text></g><g><title>write (9,982,751 samples, 0.06%)</title><rect x="99.9440%" y="517" width="0.0560%" height="15" fill="rgb(241,149,10)" fg:x="17826984212" fg:w="9982751"/><text x="100.1940%" y="527.50"></text></g><g><title>[libc.so.6] (9,982,751 samples, 0.06%)</title><rect x="99.9440%" y="501" width="0.0560%" height="15" fill="rgb(249,206,44)" fg:x="17826984212" fg:w="9982751"/><text x="100.1940%" y="511.50"></text></g><g><title>[libc.so.6] (9,982,751 samples, 0.06%)</title><rect x="99.9440%" y="485" width="0.0560%" height="15" fill="rgb(251,153,30)" fg:x="17826984212" fg:w="9982751"/><text x="100.1940%" y="495.50"></text></g><g><title>[libc.so.6] (9,982,751 samples, 0.06%)</title><rect x="99.9440%" y="469" width="0.0560%" height="15" fill="rgb(239,152,38)" fg:x="17826984212" fg:w="9982751"/><text x="100.1940%" y="479.50"></text></g><g><title>[unknown] (9,982,751 samples, 0.06%)</title><rect x="99.9440%" y="453" width="0.0560%" height="15" fill="rgb(249,139,47)" fg:x="17826984212" fg:w="9982751"/><text x="100.1940%" y="463.50"></text></g></svg></svg>
\ No newline at end of file
diff --git a/lab_1/perf.data b/lab_1/perf.data
new file mode 100644
index 0000000000000000000000000000000000000000..4e870d33a698b7091485ce23a5d89cf20074045a
GIT binary patch
literal 624
zc$^Dx4RZ7JaW%?dfPfh|XahzDyx>oL;Wd2n-=O-xL+Kw-`X`kB1*Lx@+0%ife*r&)
zW{1j)K*f{ITN3fRj4}WV7Xv8m3MMZwutE9XaD>bI?E+vL=3kgHMl^X?I507w(lB{g
z_%Jh|(lB{gxUn#x(lB{gc(O8}(lB{XFsXszE_C1pCIz7GV}-iI0IVK_3sQ^HbW<x*
Old<Y%U<d+}91H-aH7oZ3

diff --git a/lab_1/perf.data.old b/lab_1/perf.data.old
new file mode 100644
index 0000000000000000000000000000000000000000..fde1692d6a82a5161ee73af1b9c59dee372f6be0
GIT binary patch
literal 624
zc$^Dx4RZ7JaW%?dfPfh|XahzDyx>oL;Wd2nPoVmrLg{Bv`Z<(-0i|Ce+0%ife*r&)
zW{1j)K*f{ITN3fRj4}WV7Xv8m3MMZwutE7xaD>bA?E+vL=3kgHMl^X?I507w(lB{g
z_%Jh|(lB{gxUn#x(lB{gc(O8}(lB{XFsXszE_C1pCIz7GV}-iI0IVK_3sQ^HbW<x*
Old<Y%U<d+}91H+SRw~y3

